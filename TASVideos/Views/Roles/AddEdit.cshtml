@model RoleEditViewModel
@{
	ViewData["Title"] = Model.Id.HasValue ? "Modifying Role: " + Model.Name : "Create a New Role";
}

<delete-button condition="@Model.Id.HasValue && ViewData.UserHasPermission(PermissionTo.DeleteRoles)" asp-href="@Url.Action($"Delete/{Model.Id}")" class="pull-right text-center">Delete</delete-button>
<h4>@ViewData["Title"]</h4>
<hr />
<div class="container">
	<form asp-route="Edit" class="form-horizontal">
		<input type="hidden" asp-for="@Model.Id" />
		<fieldset class="form-group">
			<row>
				<div class="col-sm-5">
					<label asp-for="Name" class="control-label"></label>
					<input asp-for="Name" class="form-control" maxlength="50" />
					<span asp-validation-for="Name" class="text-danger"></span>
				</div>
				<div class="col-sm-offset-2 col-sm-5">
					<label asp-for="Description" class="control-label"></label>
					<textarea asp-for="Description" class="form-control" rows="3" maxlength="200"></textarea>
					<span asp-validation-for="Description" class="text-danger"></span>
				</div>
			</row>
		</fieldset>
		<fieldset class="form-group">
			<row>
				<two-column-select id-list="SelectedPermissions" available-list="AvailablePermissions" />
			</row>
		</fieldset> 
		<fieldset class="form-group hide)" id="assignable-permissions-section">
			<row>
				<two-column-select id-list="SelectedAssignablePermissions" available-list="AvailableAssignablePermissions" />
			</row>
		</fieldset>
		<fieldset class="form-group">
			<row class="text-center mt-el">
				<button type="submit" class="btn btn-primary">@(Model.Id.HasValue ? "Update" : "Save")</button>
				<a asp-action="Index" class="btn btn-default">Cancel</a>
			</row>
		</fieldset>
	</form>
</div>

<script>
	// TODO: scope
	var assignRoles = '@((int)PermissionTo.AssignRoles)';
	var selectedPermissionsListId = 'Selected@(nameof(Model.SelectedPermissions))';
	var availableAssignableListId = '@(nameof(Model.AvailableAssignablePermissions))';
	var selectedAssignableListId = 'Selected@(nameof(Model.SelectedAssignablePermissions))';

	function shouldShowAssignRoles() {
		var hasAssign = document.querySelectorAll("[name='@nameof(Model.SelectedPermissions)']")
			.toArray()
			.filter(function(i) {
				return i.value === assignRoles;
			})
			.length >
			0;

		var hasAtLastOneOtherPerm = document.querySelectorAll("[name='@nameof(Model.SelectedPermissions)']")
			.toArray()
			.filter(function(i) {
				return i.value !== assignRoles;
			})
			.length > 0;

		return hasAssign && hasAtLastOneOtherPerm;
	}

	function syncAssignablePerms() {
		var selectedPerms = document.querySelectorAll('#' + selectedPermissionsListId + ' option')
			.toArray()
			.filter(function(elem) {
				return elem.value !== assignRoles;
			});

		var aggregatedAssignablePerms = document.querySelectorAll('#' + availableAssignableListId + ' option')
			.toArray()
			.concat(document.querySelectorAll('#' + selectedAssignableListId + ' option').toArray());

		var addedPerms = selectedPerms
			.filter(function (elem) {
				return !(aggregatedAssignablePerms
					.map(function(e) {
						return e.value;
					})
					.includes(elem.value));
		});

		var removedPerms = aggregatedAssignablePerms
			.filter(function (elem) {
				return !(selectedPerms
					.map(function(e) {
						return e.value;
					})
					.includes(elem.value));
			});

		var availAssignableElem = document.getElementById(availableAssignableListId);
		var selectedAssignableElem = document.getElementById(selectedAssignableListId);

		addedPerms.forEach(function (elem) {
			if (elem.value !== assignRoles) {
				availAssignableElem.appendChild(elem.cloneNode(true));
			}
		});

		removedPerms.forEach(function (elem) {
			if (availAssignableElem.childNodes.toArray().includes(elem)) {
				availAssignableElem.removeChild(elem);
			} else if (selectedAssignableElem.childNodes.toArray().includes(elem)) {
				selectedAssignableElem.removeChild(elem);
			}
		});
	}

	function onSelectedPermissionsChange() {
		if (shouldShowAssignRoles()) {
			document.getElementById('assignable-permissions-section').classList.remove('hide');
			syncAssignablePerms();
		} else {
			document.getElementById('assignable-permissions-section').classList.add('hide');
		}
	}

	document.getElementById('SelectedPermissions-two-column-select').addEventListener('two-column-change',
		function () {
			onSelectedPermissionsChange();
		});

	document.addEventListener("DOMContentLoaded", function(event) {
		onSelectedPermissionsChange();
	});
</script>

@section Scripts {
	@await Html.PartialAsync("_ValidationScriptsPartial")
}
