@model RoleEditViewModel
@{
	ViewData["Title"] = Model.Id.HasValue ? "Modifying Role: " + Model.Name : "Create a New Role";
}
<delete-button condition="@Model.Id.HasValue && ViewData.UserHasPermission(PermissionTo.DeleteRoles)" asp-href="@Url.Action($"Delete/{Model.Id}")" warning-message="Are you sure you want to delete this Role? This action cannot be undone!" class="pull-right text-center">Delete</delete-button>
<h4>@ViewData["Title"]</h4>
<hr />
<form asp-route="Edit" class="form-horizontal">
	<input type="hidden" asp-for="@Model.Id" />
	<form-group>
		<row>
			<div class="col-sm-5">
				<label asp-for="Name" class="control-label"></label>
				<input asp-for="Name" class="form-control" maxlength="50" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>
			<div class="col-sm-offset-2 col-sm-5">
				<label asp-for="Description" class="control-label"></label>
				<textarea asp-for="Description" class="form-control" rows="3" maxlength="200"></textarea>
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>
		</row>
		<row>
			<div class="col-sm-5">
				<label asp-for="Links" class="control-label"></label><label> (Comma separated list)</label>
				<input asp-for="LinksStr" class="form-control" spellcheck="false" autocomplete="off" />
			</div>
		</row>
	</form-group>
	<form-group>
		<row>
			<two-column-select id-list="SelectedPermissions" available-list="AvailablePermissions" />
		</row>
	</form-group>
	<form-group class="hide" id="assignable-permissions-section">
		<row>
			<two-column-select id-list="SelectedAssignablePermissions" available-list="AvailableAssignablePermissions" />
		</row>
		<row>
			<div class="col-sm-offset-7 col-sm-5">
				<br />
				<label>Roles that can be assigned: </label>
				<div id="assignable-roles">None</div>
			</div>
		</row>
	</form-group>
	<form-group>
		<row class="text-center mt-el">
			<button type="submit" class="btn btn-primary">@(Model.Id.HasValue ? "Update" : "Save")</button>
			<a asp-action="Index" class="btn btn-default">Cancel</a>
		</row>
	</form-group>
</form>
<script>
	(function() {
		var emptyAssignableRoles = "None";
		var assignRoles = '@((int)PermissionTo.AssignRoles)';
		var selectedAssignablePermissionsModelId = '@(nameof(Model.SelectedAssignablePermissions))';
		var selectedPermissionsListId = 'Selected@(nameof(Model.SelectedPermissions))';
		var availableAssignableListId = '@(nameof(Model.AvailableAssignablePermissions))';
		var selectedAssignableListId = 'Selected@(nameof(Model.SelectedAssignablePermissions))';

		function shouldShowAssignRoles() {
			var hasAssign = document.querySelectorAll("[name='@nameof(Model.SelectedPermissions)']")
				.toArray()
				.filter(function(i) {
					return i.value === assignRoles;
				})
				.length >
				0;

			var hasAtLastOneOtherPerm = document.querySelectorAll("[name='@nameof(Model.SelectedPermissions)']")
				.toArray()
				.filter(function(i) {
					return i.value !== assignRoles;
				})
				.length >
				0;

			return hasAssign && hasAtLastOneOtherPerm;
		}

		function syncAssignablePerms() {
			var selectedPerms = document.querySelectorAll('#' + selectedPermissionsListId + ' option')
				.toArray()
				.filter(function(elem) {
					return elem.value !== assignRoles;
				});

			var aggregatedAssignablePerms = document.querySelectorAll('#' + availableAssignableListId + ' option')
				.toArray()
				.concat(document.querySelectorAll('#' + selectedAssignableListId + ' option').toArray());

			var addedPerms = selectedPerms
				.filter(function(elem) {
					return !(aggregatedAssignablePerms
						.map(function(e) {
							return e.value;
						})
						.includes(elem.value));
				});

			var removedPerms = aggregatedAssignablePerms
				.filter(function(elem) {
					return !(selectedPerms
						.map(function(e) {
							return e.value;
						})
						.includes(elem.value));
				});

			var availAssignableElem = document.getElementById(availableAssignableListId);
			var selectedAssignableElem = document.getElementById(selectedAssignableListId);

			addedPerms.forEach(function(elem) {
				if (elem.value !== assignRoles) {
					availAssignableElem.appendChild(elem.cloneNode(true));
				}
			});

			removedPerms.forEach(function(elem) {
				var id = document.querySelector('[name="' + selectedAssignablePermissionsModelId + '"][v="' + elem.value + '"]');
				if (id) {
					id.remove();
				}


				if (availAssignableElem.childNodes.toArray().includes(elem)) {
					availAssignableElem.removeChild(elem);
				} else if (selectedAssignableElem.childNodes.toArray().includes(elem)) {
					selectedAssignableElem.removeChild(elem);
				}
			});

			showRolesCurrentlyAssignable();
		}

		function showRolesCurrentlyAssignable() {
			var selector = '[name="' + selectedAssignablePermissionsModelId + '"]';
			var permissions = document.querySelectorAll(selector)
				.toArray()
				.map(function(elem) {
					return elem.value;
				});

			if (permissions.length > 0) {
				var xmlhttp = new XMLHttpRequest();
				xmlhttp.onreadystatechange = function() {
					if (xmlhttp.readyState === XMLHttpRequest.DONE) {
						if (xmlhttp.status === 200) {
							var data = JSON.parse(xmlhttp.responseText);
							if (data) {
								document.getElementById("assignable-roles").textContent = data.join(', ');
							} else {
								document.getElementById("assignable-roles").textContent = emptyAssignableRoles;
							}
						}
					}
				};

				var getstr = '';
				for (var i in permissions) {
					if (permissions.hasOwnProperty(i)) {
						getstr += 'ids=' + permissions[i] + '&';
					}
				}

				getstr = getstr.slice(0, -1);
				getstr = "/Roles/@(nameof(RolesController.RolesThatCanBeAssignedBy))?" + getstr;
				xmlhttp.open("GET", getstr, true);
				xmlhttp.send();
			} else {
				document.getElementById("assignable-roles").textContent = emptyAssignableRoles;
			}
		}

		function onSelectedPermissionsChange() {
			if (shouldShowAssignRoles()) {
				document.getElementById('assignable-permissions-section').classList.remove('hide');
				syncAssignablePerms();
			} else {
				document.getElementById('assignable-permissions-section').classList.add('hide');
			}
		}

		document.getElementById('SelectedPermissions-two-column-select')
			.addEventListener('@nameof(Model.SelectedPermissions)Changed', onSelectedPermissionsChange);

		document.addEventListener("DOMContentLoaded", onSelectedPermissionsChange);

		document.getElementById('SelectedAssignablePermissions-two-column-select')
			.addEventListener('@nameof(Model.SelectedAssignablePermissions)Changed', showRolesCurrentlyAssignable);
	})();
</script>
@section Scripts {
	@await Html.PartialAsync("_ValidationScriptsPartial")
}
