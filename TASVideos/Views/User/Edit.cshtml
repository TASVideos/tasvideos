@model UserEditViewModel
@{
	ViewData["Title"] = $"Editing User: {Model.UserName}";
}

<h4>@ViewData["Title"]</h4>
<hr />
<form asp-route="Edit" method="post">
	<row>
		<fieldset class="form-group col-md-5">
			<label asp-for="UserName" class="control-label"></label>
			@if (ViewData.UserHasPermission(PermissionTo.EditUsersUserName))
			{
				<input asp-for="OriginalUserName" type="hidden" />
				<row>
					<div id="user-name-div" class="col-sm-12">
						<div class="input-group">
							<input asp-for="UserName" class="form-control" autocomplete="off" />
							<span class="input-group-addon" aria-hidden="true">
								<span id="user-name-status" class="glyphicon glyphicon-ok text-success"></span>
							</span>
						</div>
						<span id="username-exists-message" class="hide text-danger">User name already exists</span>
					</div>
					<div>
						<button id="check-username" type="button" class="btn btn-default hide">Check</button>
					</div>
					<script>
						(function () {
							var checkUserBtn = document.getElementById('check-username');
							var userNameBox = document.getElementById('@nameof(Model.UserName)');
							var userNameStatus = document.getElementById('user-name-status');
							var userNameExistsMessage = document.getElementById('username-exists-message');
							var originalUserNameBox = document.getElementById('@nameof(Model.OriginalUserName)');
							var userNameDiv = document.getElementById('user-name-div');

							userNameBox.onkeyup = onUserNameBoxChange;
							userNameBox.onchange = onUserNameBoxChange;

							function onUserNameBoxChange() {
								if (userNameBox.value === originalUserNameBox.value) {
									hideCheckNameBtn();
									markUserNameGood();
								} else {
									showCheckNameBtn();
									markUserNameUnknown();
								}
							}

							function showCheckNameBtn() {
								checkUserBtn.classList.remove('hide');
								checkUserBtn.parentNode.classList.add('col-sm-2');
								userNameDiv.classList.remove('col-sm-12');
								userNameDiv.classList.add('col-sm-10');
							}

							function hideCheckNameBtn() {
								checkUserBtn.classList.add("hide");
								checkUserBtn.parentNode.classList.remove('col-sm-2');
								userNameDiv.classList.remove('col-sm-10');
								userNameDiv.classList.add('col-sm-12');
							}

							function markUserNameUnknown() {
								userNameStatus.classList.remove('glyphicon-ok', 'text-success');
								userNameStatus.classList.remove('glyphicon-alert', 'text-danger');
								userNameStatus.classList.add('glyphicon-question-sign', 'text-primary');
								userNameExistsMessage.classList.add('hide');
								document.getElementById('submit-btn').disabled = true;
							}

							function markUserNameGood() {
								userNameStatus.classList.add('glyphicon-ok', 'text-success');
								userNameStatus.classList.remove('glyphicon-alert', 'text-danger');
								userNameStatus.classList.remove('glyphicon-question-sign', 'text-primary');
								userNameExistsMessage.classList.add('hide');
								document.getElementById('submit-btn').disabled = false;
							}

							function markUserNameBad() {
								userNameStatus.classList.remove('glyphicon-ok', 'text-success');
								userNameStatus.classList.add('glyphicon-alert', 'text-danger');
								userNameStatus.classList.remove('glyphicon-question-sign', 'text-primary');
								userNameExistsMessage.classList.remove('hide');
								document.getElementById('submit-btn').disabled = true;
							}

							checkUserBtn.onclick = function () {
								if (originalUserNameBox.value === userNameBox.value) {
									markUserNameGood();
									return;
								}

								var xmlhttp = new XMLHttpRequest();

								xmlhttp.onreadystatechange = function () {
									if (xmlhttp.readyState === XMLHttpRequest.DONE) {
										if (xmlhttp.status === 200) {
											if (xmlhttp.responseText === "true") {
												markUserNameBad();
											} else {
												markUserNameGood();
											}
										}
									}
								};

								xmlhttp.open("GET", "/User/@(nameof(UserController.VerifyUserNameIsUnique))?userName=" + userNameBox.value, true);
								xmlhttp.send();
							};
						})();
					</script>
					<span asp-validation-for="UserName"></span>
				</row>
			}
			else
			{
				<label class="form-control">@Model.UserName</label>
			}
		</fieldset>
		<fieldset class="form-group col-md-offset-2 col-md-5">
			<label asp-for="Email" class="control-label"></label>
			@if (Model.EmailConfirmed)
			{
				<div class="input-group">
					<label class="form-control">@Model.Email</label>
					<span class="input-group-addon" aria-hidden="true"><span class="glyphicon glyphicon-ok text-success"></span></span>
				</div>
			}
			else
			{
				<label class="form-control">@Model.Email</label>
			}
		</fieldset>
		@if (Model.IsLockedOut)
		{
			<fieldset class="form-group col-md-5">
				<label class="text-danger col-sm-9"><span class="glyphicon glyphicon-alert"></span> This user is currently locked out</label>
				<div class="col-sm-3">
					<a class="btn btn-default" asp-action="Unlock" asp-route-returnurl="@($"{Context.Request.Path}{Context.Request.QueryString}")" asp-route-id="@Model.Id">Unlock</a>
				</div>
			</fieldset>
		}
	</row>
	@Html.TwoColumnPickerFor(m => m.SelectedRolesStr, n => n.AvailableRoles)
	<hr/>
	<div class="text-center">
		<button id="submit-btn" type="submit" class="btn btn-primary">Update</button>
		<a asp-action="List" class="btn btn-default">Cancel</a>
	</div>
</form>