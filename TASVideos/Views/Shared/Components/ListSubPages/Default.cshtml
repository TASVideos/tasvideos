@model IEnumerable<string>
@{
	var pageId = ViewData.UniqueId();

	var parent = (string)ViewData["Parent"];
	var pageGrouping = Model.GroupBy(tkey => tkey.Replace(parent + "/", "").Split('/').FirstOrDefault());

	var show = (bool)(ViewData["show"] ?? false);
}

<div condition="@Model.Any()" class="card">
	<div class="card-header">
		<collapsablecontent-header body-id="collapse-content-@pageId">
			<strong>Subpages for @ViewData["Parent"]</strong>
		</collapsablecontent-header>
	</div>
	<collapsablecontent-body class="card-body" id="collapse-content-@pageId" show="@show">
		<ul>
			@foreach (var pageGroup in pageGrouping.OrderBy(g => g.Key))
			{
				<li>
					<a href="/@($"{parent}/{pageGroup.Key}")">@pageGroup.Key.Replace($"{parent}/", "")</a>
					<ul condition="pageGroup.Count() > 1">
						@foreach (var subpage in pageGroup.Where(pg => pg != $"{parent}/{pageGroup.Key}").OrderBy(pg => pg))
						{
							<li><a href="/@subpage">@subpage.Replace($"{parent}/{pageGroup.Key}/", "")</a></li>
						}
					</ul>
				</li>
			}
		</ul>
	</collapsablecontent-body>
</div>