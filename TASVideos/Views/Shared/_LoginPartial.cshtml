@using TASVideos.Tasks
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject PrivateMessageTasks PmTasks
@{ 
	bool isSignedIn = SignInManager.IsSignedIn(User);
	int notificationCount = 0;

	if (isSignedIn)
	{
		var user = await UserManager.GetUserAsync(User);
		notificationCount = await PmTasks.GetUnreadMessageCount(user);
	}
}
<div class="d-md-flex">
	@if (isSignedIn)
	{
		<form asp-controller="Account" asp-action="Logout" method="post" id="logoutForm">
			<ul class="navbar-nav">
				<li condition="notificationCount > 0" class="nav-item">
					<a class="nav-link" asp-controller="Forum" asp-action="Inbox">
						<span class="badge badge-danger">@notificationCount</span>
						<span class="sr-only">unread messages</span>
						<span class="fa fa-envelope"></span>
					</a>
				</li>
				<li class="nav-item @(ViewContext.Controller() == "Profile" ? "active" : "")">
					<a class="nav-link" asp-area="" asp-controller="Profile" asp-action="Index" title="Manage">@UserManager.GetUserName(User)</a>
				</li>
				<li class="nav-item">
					<button type="submit" class="btn btn-link navbar-btn nav-link">Log out</button>
				</li>
			</ul>
		</form>
	}
	else
	{
		<ul class="navbar-nav">
			<li class="nav-item">
				<a class="nav-link" asp-controller="Account" asp-action="Register">Register</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" asp-controller="Account" asp-action="Login" asp-route-returnUrl="@($"{Context.Request.Path}{Context.Request.QueryString}")">Log in</a>
			</li>
		</ul>
	}
</div>