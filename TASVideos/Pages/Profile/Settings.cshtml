@page
@model SettingsModel
@{
	ViewData.SetTitle("Profile Settings");
	ViewData.AddActivePage(ProfileNavPages.Settings);
	string trueId, falseId;
}
<div asp-validation-summary="All" class="text-danger"></div>
<form method="post">
	<row>
		<column lg="6">
			<fieldset>
				<label asp-for="Settings.Username"></label>
				<input asp-for="Settings.Username" class="form-control" disabled />
				<div class="text-warning">
					@await Component.RenderWiki(SystemWiki.NameChanges)
				</div>
			</fieldset>
			<a asp-page="ChangeEmail">Change Email</a>
			@if (Model.Settings.IsEmailConfirmed)
			{
				<fieldset disabled>
					<label asp-for="Settings.Email"></label>
					<div class="input-group">
						<input asp-for="Settings.Email" class="form-control" />
						<div class="input-group-text" aria-disabled="true"><span class="fa fa-check-square text-success"></span></div>
					</div>
				</fieldset>
			}
			else
			{
				<fieldset>
					<div class="input-group">
						<input asp-for="Settings.Email" readonly class="form-control"/>
						<div class="input-group-text" aria-disabled="true" title="Email not confirmed"><span class="fa fa-exclamation text-warning"></span></div>
					</div>
					<button asp-page="Settings" asp-page-handler="SendVerificationEmail" class="btn btn-link">Send verification email</button>
				</fieldset>
			}
			
			<fieldset>
				<label asp-for="Settings.PublicRatings"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					@{
						trueId = nameof(Model.Settings.PublicRatings) + "-true";
						falseId = nameof(Model.Settings.PublicRatings) + "-false";
					}
					<label for="@trueId" class="btn btn-secondary @(Model.Settings.PublicRatings ? "active" : "")">
						<input id="@trueId" type="radio" value="True" asp-for="Settings.PublicRatings" /> Yes
					</label>
					<label for="@falseId" class="btn btn-secondary @(!Model.Settings.PublicRatings ? "active" : "")">
						<input id="@falseId" type="radio" value="False" asp-for="Settings.PublicRatings" /> No
					</label>
				</div>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.EmailOnPrivateMessage"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					@{
						trueId = nameof(Model.Settings.EmailOnPrivateMessage) + "-true";
						falseId = nameof(Model.Settings.EmailOnPrivateMessage) + "-false";
					}
					<label for="@trueId" class="btn btn-secondary @(Model.Settings.EmailOnPrivateMessage ? "active" : "")">
						<input id="@trueId" type="radio" value="True" asp-for="Settings.EmailOnPrivateMessage" /> Yes
					</label>
					<label for="@falseId" class="btn btn-secondary @(!Model.Settings.EmailOnPrivateMessage ? "active" : "")">
						<input id="@falseId" type="radio" value="False" asp-for="Settings.EmailOnPrivateMessage" /> No
					</label>
				</div>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.AutoWatchTopic"></label>
				<select asp-for="Settings.AutoWatchTopic" asp-items="@SettingsModel.AvailableUserPreferenceTypes" class="form-control"></select>
			</fieldset>
		</column>
		<column lg="6">
			<fieldset>
				<label asp-for="Settings.PreferredPronouns"></label>
				<select asp-for="Settings.PreferredPronouns" asp-items="@SettingsModel.AvailablePronouns" class="form-select"></select>
				<span asp-validation-for="Settings.PreferredPronouns"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.From"></label>
				<input asp-for="Settings.From" class="form-control" />
				<span asp-validation-for="Settings.From"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.TimeZoneId"></label>
				<timezone-picker asp-for="Settings.TimeZoneId" class="form-select" />
			</fieldset>
			@{
				DateTime exampleDate = new DateTime(2024, 2, 29, 17, 35, 0);
				double exampleNumber = 1.23;
			}
			<fieldset>
				<label asp-for="Settings.UserDateFormat"></label>
				<label condition="@Model.Settings.UserDateFormat == UserDateFormat.Auto" asp-for="Settings.UserDateFormat" class="text-body-tertiary">(Currently: @exampleDate.ToShortDateString())</label>
				<select asp-for="Settings.UserDateFormat" asp-items="@SettingsModel.AvailableDateFormats" class="form-select"></select>
				<span asp-validation-for="Settings.UserDateFormat"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.UserTimeFormat"></label>
				<label condition="@Model.Settings.UserTimeFormat == UserTimeFormat.Auto" asp-for="Settings.UserTimeFormat" class="text-body-tertiary">(Currently: @exampleDate.ToShortTimeString())</label>
				<select asp-for="Settings.UserTimeFormat" asp-items="@SettingsModel.AvailableTimeFormats" class="form-select"></select>
				<span asp-validation-for="Settings.UserTimeFormat"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Settings.UserDecimalFormat"></label>
				<label condition="@Model.Settings.UserDecimalFormat == UserDecimalFormat.Auto"  asp-for="Settings.UserDecimalFormat" class="text-body-tertiary">(Currently: @exampleNumber)</label>
				<select asp-for="Settings.UserDecimalFormat" asp-items="@SettingsModel.AvailableDecimalFormats" class="form-select"></select>
				<span asp-validation-for="Settings.UserDecimalFormat"></span>
			</fieldset>
		</column>
	</row>
	<hr />
	<fullrow class="mt-3">
		<label asp-for="Settings.Avatar"></label>
		<input type="text" asp-for="Settings.Avatar" class="form-control" />
	</fullrow>
	<fullrow class="mt-2" id="avatar-preview">
		<div show="!string.IsNullOrWhiteSpace(Model.Settings.Avatar)" class="float-end">
			<button id="preview-btn" type="button" class="btn btn-secondary btn-sm m-2">
				<span class="fa fa-refresh"></span>
			</button>
			<label>Preview</label><br />
			<img id="avatar-img" src="@Model.Settings.Avatar" class="m-2" />
		</div>
		<small>
			@await Component.RenderWiki(SystemWiki.AvatarRequirements)
		</small>
	</fullrow>
	<fullrow permission="UseMoodAvatars">
		<label asp-for="Settings.MoodAvatar"></label>
		<input type="text" asp-for="Settings.MoodAvatar" class="form-control" />
		<a asp-page="/Forum/MoodReport" asp-route-username="@Model.Settings.Username">Check Mood Avatars</a>
	</fullrow>
	<fullrow permission="UseMoodAvatars" class="mt-3">
		<small>
			@await Component.RenderWiki(SystemWiki.MoodAvatarRequirements)
		</small>
	</fullrow>
	<fullrow permission="EditSignature" class="mt-3">
		<label asp-for="Settings.Signature"></label>
		<textarea asp-for="Settings.Signature" class="form-control" rows="5" disabled="@(!User.Has(PermissionTo.EditSignature))"></textarea>
	</fullrow>
	<hr />
	<div class="text-center">
		<button id="submit-btn" type="submit" class="btn btn-secondary">Save</button>
	</div>
</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		{
			let avatarBoxElem = document.getElementById('@Html.IdFor(m => m.Settings.Avatar)');
			let previewElem = document.getElementById('avatar-preview');

			document.addEventListener("DOMContentLoaded", validateAvatar);
			avatarBoxElem.addEventListener('blur', toggleAvatarPreview);
			document.getElementById('preview-btn').addEventListener('click', toggleAvatarPreview);

			let avatarImgElem = document.getElementById('avatar-img');

			function toggleAvatarPreview() {
				const avatar = document.getElementById('@Html.IdFor(m => m.Settings.Avatar)').value;
				if (avatar) {
					avatarImgElem.onload = validateAvatar;
					avatarImgElem.src = avatar;
				} else {
					previewElem.classList.add('d-none');
					preventSave(false);
				}
			}

			function validateAvatar() {
				const maxWidth = @AvatarRequirements.Width;
				const maxHeight = @AvatarRequirements.Height;

				const tooBig = avatarImgElem.width > maxWidth || avatarImgElem.height > maxHeight;
				if (tooBig) {
					previewElem.classList.add('alert');
					previewElem.classList.add('alert-danger');
					preventSave(true);
				} else {
					previewElem.classList.remove('alert');
					previewElem.classList.remove('alert-danger');
					preventSave(false);
				}

				previewElem.classList.remove('d-none');
			}

			function preventSave(prevent) {
				document.getElementById('submit-btn').disabled = prevent;
			}
		}
	</script>
}
