@page
@model SettingsModel
@{
	ViewData["Title"] = "Profile Settings";
	ViewData.AddActivePage(ProfileNavPages.Settings);
}
<h4>@ViewData["Title"]</h4>
<div asp-validation-summary="All" class="text-danger"></div>
<form method="post">
	<row>
		<column lg="6">
			<form-group>
				<label asp-for="Settings.Username"></label>
				<input asp-for="Settings.Username" class="form-control" disabled />
				<div class="text-warning">
					@await Component.RenderWiki("System/NameChanges")
				</div>
			</form-group>
			<a asp-page="ChangeEmail">Change Email</a>
			@if (Model.Settings.IsEmailConfirmed)
			{
				<form-group disabled>
					<label asp-for="Settings.Email"></label>
					<div class="input-group">
						<input asp-for="Settings.Email" class="form-control" />
						<div class="input-group-text" aria-disabled="true"><span class="fa fa-check-square text-success"></span></div>
					</div>
				</form-group>
				
			}
			else
			{
				<form-group>
					<div class="input-group">
						<input asp-for="Settings.Email" readonly class="form-control"/>
						<div class="input-group-text" aria-disabled="true" title="Email not confirmed"><span class="fa fa-exclamation text-warning"></span></div>
					</div>
					<button asp-page="Settings" asp-page-handler="SendVerificationEmail" class="btn btn-link">Send verification email</button>
				</form-group>
			}
			
			<form-group>
				<label asp-for="Settings.PublicRatings"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					@{
						const string trueId = nameof(Model.Settings.PublicRatings) + "-true";
						const string falseId = nameof(Model.Settings.PublicRatings) + "-false";
					}
					<label for="@trueId" class="btn btn-secondary @(Model.Settings.PublicRatings ? "active" : "")">
						<input id="@trueId" type="radio" value="True" asp-for="Settings.PublicRatings" /> Yes
					</label>
					<label for="@falseId" class="btn btn-secondary @(!Model.Settings.PublicRatings ? "active" : "")">
						<input id="@falseId" type="radio" value="False" asp-for="Settings.PublicRatings" /> No
					</label>
				</div>
			</form-group>
			<form-group>
				<label asp-for="Settings.EmailOnPrivateMessage"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					@{
						const string trueId = nameof(Model.Settings.EmailOnPrivateMessage) + "-true";
						const string falseId = nameof(Model.Settings.EmailOnPrivateMessage) + "-false";
					}
					<label for="@trueId" class="btn btn-secondary @(Model.Settings.EmailOnPrivateMessage ? "active" : "")">
						<input id="@trueId" type="radio" value="True" asp-for="Settings.EmailOnPrivateMessage" /> Yes
					</label>
					<label for="@falseId" class="btn btn-secondary @(!Model.Settings.EmailOnPrivateMessage ? "active" : "")">
						<input id="@falseId" type="radio" value="False" asp-for="Settings.EmailOnPrivateMessage" /> No
					</label>
				</div>
			</form-group>
		</column>
		<column lg="6">
			<form-group>
				<label asp-for="Settings.TimeZoneId"></label>
				<timezone-picker asp-for="Settings.TimeZoneId" class="form-select" />
			</form-group>
			<form-group>
				<label asp-for="Settings.From"></label>
				<input asp-for="Settings.From" class="form-control" />
				<span asp-validation-for="Settings.From"></span>
			</form-group>
			<form-group>
				<label asp-for="Settings.PreferredPronouns"></label>
				<select asp-for="Settings.PreferredPronouns" asp-items="@SettingsModel.AvailablePronouns" class="form-select"></select>
				<span asp-validation-for="Settings.PreferredPronouns"></span>
			</form-group>
		</column>
	</row>
	<hr />
	<row>
		<column md="6">
			<label asp-for="Settings.Avatar"></label>
			<input type="text" asp-for="Settings.Avatar" class="form-control" />
		</column>
		<column id="avatar-preview" md="6" class="mt-md-0 mt-3" show="!string.IsNullOrWhiteSpace(Model.Settings.Avatar)">
			<label>Preview</label>
			<button id="preview-btn" type="button" class="btn btn-secondary btn-sm">
				<span class="fa fa-refresh"></span>
			</button><br />
			<img id="avatar-img" src="@Model.Settings.Avatar" class="float-start m-2" />
			<small>
				@await Component.RenderWiki("System/AvatarRequirements")
			</small>
		</column>
	</row>
	<row permission="UseMoodAvatars">
		<column md="6">
			<label asp-for="Settings.MoodAvatar"></label>
			<input type="text" asp-for="Settings.MoodAvatar" class="form-control" />
			<a asp-page="/Forum/MoodReport" asp-route-username="@Model.Settings.Username">Check Mood Avatars</a>
		</column>
		<column md="6">
			<small>
				@await Component.RenderWiki("System/MoodAvatarRequirements")
			</small>
		</column>
	</row>
	<fullrow class="mt-3">
		<label asp-for="Settings.Signature"></label>
		<textarea asp-for="Settings.Signature" class="form-control" rows="5"></textarea>
	</fullrow>
	<hr />
	<div class="text-center">
		<button id="submit-btn" type="submit" class="btn btn-secondary">Save</button>
	</div>
</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		{
			let avatarBoxElem = document.getElementById('@Html.IdFor(m => m.Settings.Avatar)');
			let previewElem = document.getElementById('avatar-preview');

			document.addEventListener("DOMContentLoaded", validateAvatar);
			avatarBoxElem.addEventListener('blur', toggleAvatarPreview);
			document.getElementById('preview-btn').addEventListener('click', toggleAvatarPreview);

			let avatarImgElem = document.getElementById('avatar-img');

			function toggleAvatarPreview() {
				const avatar = document.getElementById('@Html.IdFor(m => m.Settings.Avatar)').value;
				if (avatar) {
					avatarImgElem.onload = validateAvatar;
					avatarImgElem.src = avatar;
				} else {
					previewElem.classList.add('d-none');
					preventSave(false);
				}
			}

			function validateAvatar() {
				const maxWidth = @AvatarRequirements.Width;
				const maxHeight = @AvatarRequirements.Height;

				const tooBig = avatarImgElem.width > maxWidth || avatarImgElem.height > maxHeight;
				if (tooBig) {
					previewElem.classList.add('alert');
					previewElem.classList.add('alert-danger');
					preventSave(true);
				} else {
					previewElem.classList.remove('alert');
					previewElem.classList.remove('alert-danger');
					preventSave(false);
				}

				previewElem.classList.remove('d-none');
			}

			function preventSave(prevent) {
				document.getElementById('submit-btn').disabled = prevent;
			}
		}
	</script>
}
