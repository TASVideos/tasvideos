@page
@model SettingsModel
@{
	ViewData.SetTitle("Profile Settings");
	ViewData.AddActivePage(ProfileNavPages.Settings);
	const string ratingsTrueId = nameof(Model.PublicRatings) + "-true";
	const string ratingsFalseId = nameof(Model.PublicRatings) + "-false";
	const string emailOnPmTrueId = nameof(Model.EmailOnPrivateMessage) + "-true";
	const string emailOnPmFalseId = nameof(Model.EmailOnPrivateMessage) + "-false";
	bool useGravatar = Model.Avatar?.Contains("gravatar") ?? false;
}
<div asp-validation-summary="All" class="text-danger"></div>
<form method="post">
	<row>
		<column lg="6">
			<fieldset>
				<label asp-for="Username"></label>
				<input asp-for="Username" class="form-control" disabled />
				<div class="text-warning">
					@await Html.RenderWiki(SystemWiki.NameChanges)
				</div>
			</fieldset>
			<a asp-page="ChangeEmail">Change Email</a>
			@if (Model.IsEmailConfirmed)
			{
				<fieldset disabled>
					<label asp-for="Email"></label>
					<div class="input-group">
						<input asp-for="Email" class="form-control" />
						<div class="input-group-text" aria-disabled="true"><span class="fa fa-check-square text-success"></span></div>
					</div>
				</fieldset>
			}
			else
			{
				<fieldset>
					<div class="input-group">
						<input asp-for="Email" readonly class="form-control"/>
						<div class="input-group-text" aria-disabled="true" title="Email not confirmed"><span class="fa fa-exclamation text-warning"></span></div>
					</div>
					<button asp-page="Settings" asp-page-handler="SendVerificationEmail" class="btn btn-link">Send verification email</button>
				</fieldset>
			}

			<fieldset>
				<label asp-for="PublicRatings"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					<label for="@ratingsTrueId" class="btn btn-secondary @(Model.PublicRatings ? "active" : "")">
						<input id="@ratingsTrueId" type="radio" value="True" asp-for="PublicRatings" /> Yes
					</label>
					<label for="@ratingsFalseId" class="btn btn-secondary @(!Model.PublicRatings ? "active" : "")">
						<input id="@ratingsFalseId" type="radio" value="False" asp-for="PublicRatings" /> No
					</label>
				</div>
			</fieldset>
			<fieldset>
				<label asp-for="EmailOnPrivateMessage"></label>
				<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
					<label for="@emailOnPmTrueId" class="btn btn-secondary @(Model.EmailOnPrivateMessage ? "active" : "")">
						<input id="@emailOnPmTrueId" type="radio" value="True" asp-for="EmailOnPrivateMessage" /> Yes
					</label>
					<label for="@emailOnPmFalseId" class="btn btn-secondary @(!Model.EmailOnPrivateMessage ? "active" : "")">
						<input id="@emailOnPmFalseId" type="radio" value="False" asp-for="EmailOnPrivateMessage" /> No
					</label>
				</div>
			</fieldset>
			<fieldset>
				<label asp-for="AutoWatchTopic"></label>
				<select asp-for="AutoWatchTopic" asp-items="@SettingsModel.AvailableUserPreferenceTypes" class="form-select"></select>
			</fieldset>
		</column>
		<column lg="6">
			<fieldset>
				<label asp-for="PreferredPronouns"></label>
				<select asp-for="PreferredPronouns" asp-items="@SettingsModel.AvailablePronouns" class="form-select"></select>
				<span asp-validation-for="PreferredPronouns"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Location"></label>
				<input asp-for="Location" class="form-control" />
				<span asp-validation-for="Location"></span>
			</fieldset>
			<fieldset>
				<label asp-for="TimeZoneId"></label>
				<timezone-picker asp-for="TimeZoneId" class="form-select" />
			</fieldset>
			@{
				var exampleDate = new DateTime(2024, 2, 29, 17, 35, 0);
				const double exampleNumber = 1.23;
			}
			<fieldset>
				<label asp-for="UserDateFormat"></label>
				<label condition="@Model.UserDateFormat == UserDateFormat.Auto" asp-for="UserDateFormat" class="text-body-tertiary">(Currently: @exampleDate.ToShortDateString())</label>
				<select asp-for="UserDateFormat" asp-items="@SettingsModel.AvailableDateFormats" class="form-select"></select>
				<span asp-validation-for="UserDateFormat"></span>
			</fieldset>
			<fieldset>
				<label asp-for="UserTimeFormat"></label>
				<label condition="@Model.UserTimeFormat == UserTimeFormat.Auto" asp-for="UserTimeFormat" class="text-body-tertiary">(Currently: @exampleDate.ToShortTimeString())</label>
				<select asp-for="UserTimeFormat" asp-items="@SettingsModel.AvailableTimeFormats" class="form-select"></select>
				<span asp-validation-for="UserTimeFormat"></span>
			</fieldset>
			<fieldset>
				<label asp-for="UserDecimalFormat"></label>
				<label condition="@Model.UserDecimalFormat == UserDecimalFormat.Auto"  asp-for="UserDecimalFormat" class="text-body-tertiary">(Currently: @exampleNumber)</label>
				<select asp-for="UserDecimalFormat" asp-items="@SettingsModel.AvailableDecimalFormats" class="form-select"></select>
				<span asp-validation-for="UserDecimalFormat"></span>
			</fieldset>
		</column>
	</row>
	<hr />
	<label>Use Gravatar</label>
	<div class="btn-group btn-group-toggle" data-bs-toggle="buttons">
		<label for="UseGravatar-true" class="btn btn-secondary @(useGravatar ? "active" : "")">
			<input id="UseGravatar-true" type="radio" value="True" name="UseGravatar" @(useGravatar ? "checked" : "") /> Yes
		</label>
		<label for="UseGravatar-false" class="btn btn-secondary" value="True"  @(!useGravatar ? "active" : "")>
			<input id="UseGravatar-false" type="radio" value="False" name="UseGravatar" @(!useGravatar ? "checked" : "") /> No
		</label>
	</div>
	<div id="gravatar-section">
		<label>Email to Use for Gravatar Image</label>
		<input id="gravatar-email" class="form-control" value="@Model.Email"/>
		<img id="gravatar-img-preview" alt="Gravatar Preview" src="" />
	</div>
	<div id="avatar-section">
		<fullrow class="mt-3">
			<label asp-for="Avatar"></label>
			<input type="text" asp-for="Avatar" class="form-control" />
		</fullrow>
		<fullrow class="mt-2" id="avatar-preview">
			<div show="!string.IsNullOrWhiteSpace(Model.Avatar)" class="float-end">
				<button id="preview-btn" type="button" class="btn btn-secondary btn-sm m-2">
					<span class="fa fa-refresh"></span>
				</button>
				<label>Preview</label><br />
				<img id="avatar-img" src="@Model.Avatar" class="m-2" alt="Avatar preview" />
			</div>
			<small>
				@await Html.RenderWiki(SystemWiki.AvatarRequirements)
			</small>
		</fullrow>
		<fullrow permission="UseMoodAvatars">
			<label asp-for="MoodAvatar"></label>
			<input type="text" asp-for="MoodAvatar" class="form-control" />
			<a asp-page="/Forum/MoodReport" asp-route-username="@Model.Username">Check Mood Avatars</a>
		</fullrow>
		<fullrow permission="UseMoodAvatars" class="mt-3">
			<small>
				@await Html.RenderWiki(SystemWiki.MoodAvatarRequirements)
			</small>
		</fullrow>
		<fullrow permission="EditSignature" class="mt-3">
			<label asp-for="Signature"></label>
			<textarea asp-for="Signature" class="form-control" rows="5" disabled="@(!User.Has(PermissionTo.EditSignature))"></textarea>
		</fullrow>
	</div>
	<hr />
	<div class="text-center">
		<button id="submit-btn" type="submit" class="btn btn-secondary">Save</button>
	</div>
</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		let avatarBoxElem = document.getElementById('@Html.IdFor(m => m.Avatar)');
		let previewElem = document.getElementById('avatar-preview');

		document.addEventListener("DOMContentLoaded", validateAvatar);
		avatarBoxElem.addEventListener('blur', toggleAvatarPreview);
		document.getElementById('preview-btn').addEventListener('click', toggleAvatarPreview);

		let avatarImgElem = document.getElementById('avatar-img');

		onGravatarToggle();
		Array.from(document.querySelectorAll('[name="UseGravatar"]')).forEach(elem => elem.addEventListener('click', onGravatarToggle));

		function toggleAvatarPreview() {
			const avatar = document.getElementById('@Html.IdFor(m => m.Avatar)').value;
			if (avatar) {
				avatarImgElem.onload = validateAvatar;
				avatarImgElem.src = avatar;
			} else {
				previewElem.classList.add('d-none');
				preventSave(false);
			}
		}

		function validateAvatar() {
			const maxWidth = @AvatarRequirements.Width;
			const maxHeight = @AvatarRequirements.Height;

			const tooBig = avatarImgElem.width > maxWidth || avatarImgElem.height > maxHeight;
			if (tooBig) {
				previewElem.classList.add('alert');
				previewElem.classList.add('alert-danger');
				preventSave(true);
			} else {
				previewElem.classList.remove('alert');
				previewElem.classList.remove('alert-danger');
				preventSave(false);
			}

			previewElem.classList.remove('d-none');
		}

		function preventSave(prevent) {
			document.getElementById('submit-btn').disabled = prevent;
		}

		async function onGravatarToggle() {
			const checked = document.querySelector('[name="UseGravatar"]:checked').value == 'True';
			if (checked) {
				console.log('showing gravatar')
				document.getElementById('gravatar-section').classList.remove('d-none');
				document.getElementById('avatar-section').classList.add('d-none');
				const gravatarUrl = await getGravatarUrl();
				document.getElementById('gravatar-img-preview').setAttribute('src', gravatarUrl)
			} else {
				console.log('showing avatar')
				document.getElementById('gravatar-section').classList.add('d-none');
				document.getElementById('avatar-section').classList.remove('d-none');
			}
			console.log('checked', checked)
		}

		async function getGravatarUrl() {
			const email = document.getElementById('gravatar-email').value?.toLowerCase();
			if (!email) {
				return;
			}

			const hash = await createSha256(email);
			return `https://gravatar.com/avatar/${hash}`;
		}

		function createSha256(string) {
			const utf8 = new TextEncoder().encode(string);
			return crypto.subtle.digest('SHA-256', utf8).then((hashBuffer) => {
				const hashArray = Array.from(new Uint8Array(hashBuffer));
				return hashArray
					.map((bytes) => bytes.toString(16).padStart(2, '0'))
					.join('');
			});
		}
	</script>
}
