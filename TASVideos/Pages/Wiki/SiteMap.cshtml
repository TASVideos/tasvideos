@page
@model SiteMapModel
@{
	ViewData.SetTitle("Site Map");
}
<div>
	<label class="float-end"><input id="only-wiki-checkbox" type="checkbox" /> Only Wiki Pages</label>
</div>
@foreach (var rootPage in Model.Map.GroupBy(m => m.PageName.SplitWithEmpty("/").First()).OrderBy(g => g.Key))
{
	bool isPage = rootPage.Any(p => p.PageName == rootPage.Key);
	bool hasSubpages = rootPage.Count(p => p.PageName != rootPage.Key) > 0;
	bool isWiki = rootPage.Any(p => p.IsWiki);
	<div class="@(isWiki ? "wiki" : "developed")">
		<i condition="@hasSubpages" class="fa fa-plus" data-bs-toggle="collapse" href="#collapse@(rootPage.Key)" style="cursor: pointer"></i>
		<label>
			<a condition="@isPage" href="/@rootPage.Key">@rootPage.Key</a>
			<span condition="@(!isPage)">@rootPage.Key</span>
		</label>
		<ul class="collapse" id="collapse@(rootPage.Key)">
			@foreach(var p in rootPage.Where(p => p.PageName != rootPage.Key).OrderBy(p => p.PageName))
			{
				<li class="@(p.IsWiki ? "wiki" : "developed")">
					<a href="/@p.PageName">@p.PageName</a>
					<span condition="@(!p.IsWiki)">(Built-in)</span>
					<span condition="@(p.AccessRestriction != "Anonymous")">Access: @p.AccessRestriction</span>
				</li>
			}
		</ul>
	</div>
}

<br/>
<h4>Aliases</h4>
<caption>These are alternate names by design and the preferred urls for linking</caption>
<ul>
	@foreach (var kvp in TASVideos.Extensions.ServiceCollectionExtensions.Aliases)
	{
		<li>@kvp.Value <small>(maps to @kvp.Key)</small></li>
	}
</ul>
<br />
<h4>Legacy Redirects</h4>
<caption>These pages are left in for legacy links, they should not be used, and should be replaced when seen.</caption>
<ul>
	@foreach (var kvp in TASVideos.Extensions.ServiceCollectionExtensions.LegacyRedirects)
	{
		<li>@kvp.Value</li>
	}
</ul>

<script src="/js/wiki-site-map.js"></script>
