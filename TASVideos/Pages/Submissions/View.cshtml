@page "{id}"
@using TASVideos.Pages.Submissions.Models
@model ViewModel
@{
	ViewData["Title"] = $"Submission #{Model.Id}";
	bool hasEncode = !string.IsNullOrWhiteSpace(Model.Submission.EncodeEmbedLink);
	bool canEdit = ViewData.UserHas(PermissionTo.EditSubmissions)
		|| (Model.CanEdit && ViewData.UserHas(PermissionTo.SubmitMovies));
	bool hasJudgeOrPublisher = !string.IsNullOrWhiteSpace(Model.Submission.Judge) || !string.IsNullOrWhiteSpace(Model.Submission.Publisher);
	bool showTier = !string.IsNullOrWhiteSpace(Model.Submission.TierName) && Model.Submission.Status != SubmissionStatus.Rejected && Model.Submission.TierName != "Standard";
	bool canPublish = ViewData.UserHas(PermissionTo.PublishMovies)
		&& Model.Submission.Status == SubmissionStatus.PublicationUnderway
		&& Model.Submission.IsCataloged
		&& Model.Submission.Publisher == User.Name();
	string statusColor = StatusColor(Model.Submission.Status);

	bool canClaimAsJudge = ViewData.UserHas(PermissionTo.JudgeSubmissions)
		&& Model.Submission.Status == SubmissionStatus.New
		&& Model.Submission.Authors.All(a => a != User.Name());
}

@functions{
	string StatusColor(SubmissionStatus status)
	{
		switch (status)
		{
			default:
				return "info";
			case SubmissionStatus.Accepted:
			case SubmissionStatus.PublicationUnderway:
			case SubmissionStatus.Published:
				return "success";
			case SubmissionStatus.Rejected:
				return "danger";
			case SubmissionStatus.NeedsMoreInfo:
			case SubmissionStatus.Delayed:
				return "warning";
		}
	}
}

@section PageTitle {
	<h1>@($"Submission {Model.Submission.Title}")</h1>
}

<row class="mt-2">
	<div class="col-lg-6" condition="hasEncode">
		@*Boilerplate boostrap stuff *@
		<div class="ratio ratio-16x9">
			<div id="ytplayer"></div>
		</div>
		<script>
			const youtubeScriptId = 'youtube-api';
			let youtubeScript = document.getElementById(youtubeScriptId);
			let player;
			@*Loads the scripts which run the Youtube Player API asynchronously*@
			if (youtubeScript === null) {
				let tag = document.createElement('script');
				let firstScript = document.getElementsByTagName('script')[0];
				
				tag.src = 'https://www.youtube.com/iframe_api';
				tag.id = youtubeScriptId;
				firstScript.parentNode.insertBefore(tag, firstScript);
			}
			@*Populates the youtube player after the API script is ready*@
			if (!player) {
				@{
				if (!String.IsNullOrEmpty(Model.Submission!.EncodeEmbedLink)){
					<text>
						window.onYouTubeIframeAPIReady = () => {
							player = new YT.Player('ytplayer', {
								videoId: "@Model.Submission!.EncodeEmbedLink.Split("/").Last()"
							});
						}
					</text>
				}
				}
			}
		</script>
		<br />
		<a href="@Model.Submission!.EncodeEmbedLink">(Link to video)</a>
	</div>
	<div class="@(hasEncode ? "col-lg-6" : "col-lg-12")">
		<div class="alert alert-@(statusColor)" role="alert">
			<h4 condition="!Model.IsPublished" class="alert-heading">
				Status: @Model.Submission.Status.EnumDisplayName()
				<small condition="@Model.Submission.Status == SubmissionStatus.Rejected">
					<span condition="!string.IsNullOrWhiteSpace(Model.Submission.RejectionReasonDisplay)">(Reason: @Model.Submission.RejectionReasonDisplay)</span>
				</small>
			</h4>
			<h4 condition="Model.IsPublished" class="alert-heading">Status: <a asp-page="/Publications/View" asp-route-id="@Model.PublicationId">@Model.Submission.Status.EnumDisplayName()</a></h4>
			<div condition="Model.Submission.HoursRemainingForJudging() > 0">
				(Available for judging in @Model.Submission.HoursRemainingForJudging() hours)
			</div>
			<span condition="@(!string.IsNullOrWhiteSpace(Model.Submission.Judge))">
				<label asp-for="Submission.Judge"></label>:
				<profile-link username="@Model.Submission.Judge"></profile-link>
			</span>
			<span class="ml-3" condition="@(!string.IsNullOrWhiteSpace(Model.Submission.Publisher))">
				<label asp-for="Submission.Publisher"></label>:
				<profile-link username="@Model.Submission.Publisher"></profile-link>
			</span>
			<div condition="showTier">
				<hr>
				<p class="mb-0">
					<label asp-for="Submission.TierName" class="mb-0"></label>: <a href="/@Model.Submission.TierName">@Model.Submission.TierName</a>
				</p>
			</div>
		</div>

		<table class="table table-bordered table-condensed">
			<tr>
				<th>@SubmissionDisplayModel.GetDisplayName("SystemDisplayName")</th>
				<td>@Model.Submission.SystemDisplayName</td>
				<th>@SubmissionDisplayModel.GetDisplayName("Emulator")</th>
				<td>@Model.Submission.Emulator</td>
			</tr>
			<tr>
				<th>@SubmissionDisplayModel.GetDisplayName("GameVersion")</th>
				<td>@Model.Submission.GameVersion</td>
				<th>@SubmissionDisplayModel.GetDisplayName("FrameCount")</th>
				<td>@Model.Submission.FrameCount</td>
			</tr>
			<tr>
				<th>@SubmissionDisplayModel.GetDisplayName("RomName")</th>
				<td>@Model.Submission.RomName</td>
				<th>@SubmissionDisplayModel.GetDisplayName("FrameRate")</th>
				<td>@Model.Submission.FrameRate</td>
			</tr>
			<tr>
				<th>@SubmissionDisplayModel.GetDisplayName("Branch")</th>
				<td>@Model.Submission.Branch</td>
				<th>@SubmissionDisplayModel.GetDisplayName("RerecordCount")</th>
				<td>@Model.Submission.RerecordCount</td>
			</tr>
			<tr>
				<th><label asp-for="Submission.StartType"></label></th>
				<td>
					<span condition="Model.Submission.WarnStartType" class="badge bg-warning text-dark">!</span>
					@(Model.Submission.StartType?.ToString() ?? "Unknown")
				</td>
				<th>Authors</th>
				<td>
					@foreach (var author in Model.Submission.Authors)
					{
						<profile-link username="@author"></profile-link><span condition="author != Model.Submission.Authors.Last()">,</span>
					}
					<small condition="!string.IsNullOrWhiteSpace(Model.Submission.AdditionalAuthors)">
						<br />(Additional: @Model.Submission.AdditionalAuthors)
					</small>
				</td>
			</tr>
		</table>
		<small>
			Submitted edited by @Model.Submission.Submitter on @Model.Submission.Submitted
		</small>
		<div class="btn-toolbar">
			<a condition="@canClaimAsJudge" asp-page="View" asp-route-id="@Model.Id" asp-page-handler="ClaimForJudging" class="btn btn-success mt-2 mr-1">Claim</a>
			<a condition="@ViewData.UserHas(PermissionTo.PublishMovies) && Model.Submission.Status == SubmissionStatus.Accepted" asp-page="View" asp-route-id="@Model.Id" asp-page-handler="ClaimForPublishing" class="btn btn-success mt-2 mr-1">Claim</a>
			<a asp-page="View" asp-page-handler="Download" asp-route-id="@Model.Id" class="btn bg-primary text-white mt-2">Download</a>
			<a condition="@Model.TopicId > 0" asp-page="/Forum/Topics/Index" asp-route-id="@Model.TopicId" class="btn bg-secondary text-white ml-1 mt-2">Discuss and Vote</a>
			<span permission="EditSubmissions" class="btn-separator mt-2"></span>
			<a condition="@canEdit" asp-page="Edit" asp-route-id="@Model.Id" class="btn bg-primary text-white mt-2">Edit</a>
			<a permission="CatalogMovies" asp-page="Catalog" asp-route-id="@Model.Id" class="ml-1 btn bg-info text-dark mt-2">Catalog</a>
			<a condition="@canPublish" asp-page="Publish" asp-route-id="@Model.Id" class="ml-1 btn btn-warning mt-2">Publish</a>
			<span class="btn-separator mt-2"></span>
			<a asp-page="Index" class="btn bg-secondary text-white mt-2">Back to Queue</a>
			<a asp-page="Index" asp-route-user="@Model.Submission.Submitter" class="ml-1 mt-2 btn bg-secondary text-white">All by this submitter</a>
		</div>
	</div>
</row>
<hr />
<card>
	<h5 class="card-header">Submission Comments</h5>
	<cardbody>
		<div class="card-text">
			@await Component.RenderWiki(LinkConstants.SubmissionWikiPage + Model.Id)
		</div>
	</cardbody>
</card>
<hr />
<small>
	last edited by @Model.Submission.LastUpdateUser on @Model.Submission.LastUpdateTimestamp
</small>
<br />
<a
	asp-page="/Wiki/PageHistory"
	asp-route-path="@(LinkConstants.SubmissionWikiPage + Model.Id)"
	class="btn bg-info text-dark btn-sm">
	Page History
</a>
<a
	asp-page="/Wiki/Diff"
	asp-route-path="@(LinkConstants.SubmissionWikiPage + Model.Id)"
	class="btn bg-info text-dark btn-sm">
	Last diff
</a>
<a
	asp-page="/Wiki/Referrers"
	asp-route-path="@($"{Model.Id}S")"
	class="btn bg-info text-dark btn-sm">
	List Referrers
</a>
