@page
@model IndexModel
@{
	ViewData["Title"] = "Submissions";
}

<div permission="SubmitMovies" class="pull-right">
	<div class="mb-1">
		<a asp-page="Submit" class="btn btn-primary">Submit a Movie</a>
	</div>
	<div>
		<a asp-page="Index" asp-route-user="@User.Identity.Name" class="btn btn-secondary">
			My Submissions
		</a>
	</div>
</div>

@await Component.RenderWiki("System/SubmissionHeader")
<hr />
<form method="get" id="submission-form">
	<two-column-select available-list="AvailableStatuses" id-list="Search.StatusFilter"/>
	<row class="mt-2 mb-2">
		<column md="5">
			<label asp-for="Search.Years" class="form-control-label"></label>
			<select asp-for="Search.Years" asp-items="Model.Search.AvailableYears" multiple class="form-control"></select>
		</column>
		<column class="offset-md-2" md="5">
			<label asp-for="Search.User" class="form-control-label"></label>
			<input autocomplete="off" asp-for="Search.User" type="text" list="@Html.IdFor(m => m.Search.User)-autocomplete" class="form-control" />
			<datalist id="@Html.IdFor(m => m.Search.User)-autocomplete"></datalist>
			@*TODO: Turn into a component, this is nearly the same code as the user list search box, and could come in handy in other places*@
			<script>
				(function () {
					var searchBox = document.getElementById('@Html.IdFor(m => m.Search.User)');
					searchBox.onkeyup = function () {
						var searchVal = searchBox.value.trim();
						var dataListId = '@Html.IdFor(m => m.Search.User)-autocomplete-' + searchVal;
						if (searchVal.length > 2) {
							var existingList = document.getElementById(dataListId);
							if (existingList) {
								searchBox.setAttribute('list', dataListId);
								return;
							}

							var xmlhttp = new XMLHttpRequest();

							xmlhttp.onreadystatechange = function() {
								if (xmlhttp.readyState === XMLHttpRequest.DONE) {
									if (xmlhttp.status === 200) {
										var newSearchList = document.createElement('datalist');
										newSearchList.id = dataListId;

										var data = JSON.parse(xmlhttp.responseText);

										for (var i in data) {
											if (data.hasOwnProperty(i)) {
												var option = document.createElement('option');
												option.innerHTML = data[i];

												newSearchList.appendChild(option);
											}
										}

										document.getElementById("submission-form").appendChild(newSearchList);
										searchBox.setAttribute('list', dataListId);
									}
								}
							};

							xmlhttp.open("GET",
								"/Subs-List?partial=" + searchVal + "&handler=SearchAuthor",
								true);
							xmlhttp.send();
						}
					};
				})();
			</script>
			<label asp-for="Search.System" class="form-control-label"></label>
			<select asp-for="Search.System" asp-items="Model.SystemList" class="form-control"></select>
		</column>
	</row>
	<button type="submit" class="btn btn-secondary mt-1">Filter</button>
</form>
<hr />
<label class="pull-right">Total: @Model.Submissions.Count()</label>
<table class="table table-striped table-bordered">
	<tr>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().System)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().GameName)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().Branch)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().Time)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().Author)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().Submitted)</th>
		<th>@Html.DisplayNameFor(m => m.Submissions.First().Status)</th>
	</tr>
	@foreach (var item in Model.Submissions)
	{
		<tr>
			<td>@item.System</td>
			<td><a href="/@(item.Id)S">@item.GameName</a></td>
			<td>@item.Branch</td>
			<td>@($"{item.Time:g}")</td>
			<td>@item.Author</td>
			<td><timezone-convert asp-for="@item.Submitted" date-only="true" /></td>
			<td>@item.Status.EnumDisplayName()</td>
		</tr>
	}
</table>