@page
@model CreateModel
@{
	ViewData["Title"] = "Create Private Message";
}

<div condition="Model.IsReply" class="card bg-light mb-3">
	<div class="card-header">
		<button type="button" id="quote-btn" class="float-end btn btn-sm btn-secondary">Quote</button>
		@Model.ReplyingTo!.Subject
	</div>
	<div class="card-body">
		<div class="card-title">
			@Model.ReplyingTo.FromUserName <span class="fa fa-arrow-right"></span> @Model.ReplyingTo.ToUserName
		</div>
		<div class="card-text" id="replying-to-text">@Model.ReplyingTo.Text</div>
	</div>
</div>

<form method="POST" id="create-form">
	<row>
		<form-group class="col-lg-6">
			<label asp-for="Subject" class="form-control-label"></label>
			<input type="text" asp-for="Subject" list="search-username-list" class="form-control" autocomplete="off" />
			<span asp-validation-for="Subject" class="text-danger"></span>
			<datalist id="search-username-list"></datalist>
		</form-group>
		<form-group class="col-lg-6">
			<label asp-for="ToUser" class="form-control-label"></label>
			<input type="text" asp-for="ToUser" class="form-control" autocomplete="off" placeholder="@Html.DescriptionFor(m => m.ToUser)" />
			<span asp-validation-for="ToUser" class="text-danger"></span>
		</form-group>
	</row>
	<fullrow>
		<partial name="Forum/_CreatePostHelper" model="@("Text")" />
	</fullrow>
	<row>
		<form-group class="col-12">
			<label asp-for="Text" class="form-control-label"></label>
			<textarea asp-for="Text" class="form-control" rows="20"></textarea>
			<span asp-validation-for="Text" class="text-danger"></span>
		</form-group>
	</row>
	<div class="text-center">
		<button type="button" class="btn btn-secondary" id="preview-button"><i class="fa fa-eye"></i> Preview</button>
		<button type="submit" class="btn btn-primary"><i class="fa fa-save"></i> Save</button>
		<a asp-page="Inbox" class="btn btn-secondary"><i class="fa fa-times"></i> Cancel</a>
	</div>
</form>

<partial name="_PreviewWindow" model="@((nameof(Model.Text), "/Forum/Preview"))" />

<script>
	{
		let searchBox = document.getElementById('@Html.IdFor(m => m.ToUser)');
		searchBox.onkeyup = function () {
			const searchVal = searchBox.value.trim();
			const dataListId = 'search-username-list-' + searchVal;
			if (searchVal.length > 2) {
				const existingList = document.getElementById(dataListId);
				if (existingList) {
					searchBox.setAttribute('list', dataListId);
					return;
				}

				const xmlhttp = new XMLHttpRequest();

				xmlhttp.onreadystatechange = function() {
					if (xmlhttp.readyState === XMLHttpRequest.DONE) {
						if (xmlhttp.status === 200) {
							const newSearchList = document.createElement('datalist');
							newSearchList.id = dataListId;

							const data = JSON.parse(xmlhttp.responseText);

							for (const i in data) {
								if (data.hasOwnProperty(i)) {
									const option = document.createElement('option');
									option.innerHTML = data[i];

									newSearchList.appendChild(option);
								}
							}

							document.getElementById("create-form").appendChild(newSearchList);
							searchBox.setAttribute('list', dataListId);
						}
					}
				};

				xmlhttp.open("GET",
					"/Users/List/Search?partial=" + searchVal,
					true);
				xmlhttp.send();
			}
		};

		if (document.getElementById('quote-btn')) {
			document.getElementById('quote-btn').onclick = function () {
				const text = document.getElementById('replying-to-text').innerHTML;
				document.getElementById('@Html.IdFor(m => m.Text)').innerHTML = '[quote]' + text + '[/quote]';
			};
		}
	}
</script>
@section Scripts {
	<partial name="_ValidationScriptsPartial" />
}
