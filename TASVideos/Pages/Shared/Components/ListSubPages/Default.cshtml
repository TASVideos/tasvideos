@using TASVideos.Core.Services.Wiki
@model IEnumerable<string>
@{
	var pageId = ViewData.UniqueId();

	var parent = ViewData["Parent"]?.ToString();
	var pageGrouping = Model.GroupBy(tkey => tkey.ReplaceFirst(parent + "/", "").Split('/').FirstOrDefault());

	var show = (bool)(ViewData["show"] ?? false);

	IWikiPage pageData = ViewData["WikiPage"] as IWikiPage ?? throw new InvalidOperationException("WikiPage not set");
	var isHomePage = WikiHelper.IsHomePage(pageData.PageName);
}

<div condition="@Model.Any()" class="card">
	<div class="card-header">
		<collapsablecontent-header body-id="collapse-content-@pageId">
			<i class="fa fa-chevron-circle-down"></i> <strong>Subpages for @ViewData["Parent"]?.ToString().SplitCamelCase(isHomePage)</strong>
		</collapsablecontent-header>
	</div>
	<collapsablecontent-body id="collapse-content-@pageId" start-shown="@show">
		<div class="card-body">
			<ul>
				@foreach (var pageGroup in pageGrouping.OrderBy(g => g.Key))
				{
					<li>
						@{
							// If we're showing the list of home pages, don't split the usernames
							var parentName = @parent == "HomePages"
								? @pageGroup.Key?.Replace($"{parent}/", "")
								: @pageGroup.Key?.Replace($"{parent}/", "").SplitCamelCase();

							<a href="/@($"{parent}/{pageGroup.Key}")">@parentName</a>
						}
						<ul condition="pageGroup.Count() > 1">
							@foreach (var subpage in pageGroup.Where(pg => pg != $"{parent}/{pageGroup.Key}").OrderBy(pg => pg))
							{
								<li><a href="/@subpage">@subpage.Replace($"{parent}/{pageGroup.Key}/", "").SplitCamelCase()</a></li>
							}
						</ul>
					</li>
				}
			</ul>
		</div>
	</collapsablecontent-body>
</div>