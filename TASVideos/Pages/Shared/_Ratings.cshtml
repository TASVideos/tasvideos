@model UserRatings
@{
	ViewData.SetTitle($"Ratings for {Model.UserName}");

	bool isMyPage = ViewData["IsMyPage"] as bool? ?? throw new InvalidOperationException("IsMyPage not set");
}
<h4>User: <profile-link username="@Model.UserName"></profile-link></h4>
<div condition="isMyPage && !Model.PublicRatings" class="alert alert-warning">
	Your ratings are currently private and will not be visible to others. This can be changed on the 
	<a asp-page="/Profile/Settings">Settings Page</a>
</div>
<div condition="!isMyPage && !Model.PublicRatings && !ViewData.UserHas(PermissionTo.SeePrivateRatings)">
	<div class="alert alert-warning">This user's ratings are private</div>
</div>
<div condition="isMyPage || Model.PublicRatings || ViewData.UserHas(PermissionTo.SeePrivateRatings)">
	<alert type="@Styles.Warning" condition="!isMyPage && ViewData.UserHas(PermissionTo.SeePrivateRatings)">
		This user has elected to keep their ratings private. You are seeing this because you have the @nameof(PermissionTo.SeePrivateRatings) permission
	</alert>
	<ul class="nav nav-tabs" role="tablist">
		<li class="nav-item">
			<a class="nav-link active" href="#current" role="tab" data-bs-toggle="tab">Current</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" href="#obsolete" role="tab" data-bs-toggle="tab">Obsolete</a>
		</li>
	</ul>

	<!-- Tab panes -->
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane fade active show" id="current">
			<table class="table table-bordered">
				<tr>
					<th>Movie</th>
					<th>Rating</th>
				</tr>
				@foreach (var rating in Model.Ratings.Where(r => !r.IsObsolete).OrderByDescending(r => r.Value))
				{
					<tr>
						<td><a href="/@(rating.PublicationId)M">@rating.PublicationTitle</a></td>
						<td>@(Math.Round(rating.Value, 1))</td>
					</tr>
				}
			</table>
		</div>
		<div role="tabpanel" class="tab-pane fade" id="obsolete">
			<table class="table table-bordered">
				<tr>
					<th>Movie</th>
					<th>Rating</th>
				</tr>
				@foreach (var rating in Model.Ratings.Where(r => r.IsObsolete).OrderByDescending(r => r.Value))
				{
					<tr>
						<td><a href="/@(rating.PublicationId)M">@rating.PublicationTitle</a></td>
						<td>@(Math.Round(rating.Value, 1))</td>
					</tr>
				}
			</table>
		</div>
	</div>
</div>