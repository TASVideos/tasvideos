@page "{id?}/{handler?}"
@model AddEditModel
@{
	bool canDelete = Model.Id.HasValue && ViewData.UserHas(PermissionTo.DeleteRoles) && Model.IsInUse;
	ViewData.SetTitle(Model.Id.HasValue ? "Modifying Role: " + Model.Role.Name : "Create a New Role");
}
<delete-button condition="canDelete"
	asp-href="@($"/Roles/AddEdit/{Model.Id}/Delete")"
	warning-message="Are you sure you want to delete this Role? This action cannot be undone!">
	Delete
</delete-button>
<hr condition="canDelete" />
<div asp-validation-summary="All" class="text-danger"></div>
<form asp-route="Edit">
	<row>
		<column lg="5">
			<fieldset>
				<label asp-for="Role.Name" class="form-control-label"></label>
				<input asp-for="Role.Name" class="form-control" maxlength="50" />
				<span asp-validation-for="Role.Name" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<div class="form-check">
					<input type="checkbox" class="form-check-input" asp-for="Role.IsDefault" />
					<label asp-for="Role.IsDefault" class="form-check-label"></label>
					<div>
						<small>(@Html.DescriptionFor(m => m.Role.IsDefault))</small>
					</div>
				</div>
			</fieldset>
		</column>
		<column lg="5" class="offset-lg-2">
			<fieldset>
				<label asp-for="Role.Description" class="form-control-label"></label>
				<textarea asp-for="Role.Description" class="form-control" rows="4" maxlength="200"></textarea>
				<span asp-validation-for="Role.Description" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<label asp-for="Role.AutoAssignPostCount" class="form-control-label"></label>
				<div>
					<small>(@Html.DescriptionFor(m => m.Role.AutoAssignPostCount))</small>
				</div>
				<span asp-validation-for="Role.AutoAssignPostCount" class="text-danger"></span>
				<input type="number" class="form-control" asp-for="Role.AutoAssignPostCount" min="1" />
			</fieldset>
			<fieldset>
				<div class="form-check">
					<input type="checkbox" class="form-check-input" asp-for="Role.AutoAssignPublications" />
					<label asp-for="Role.AutoAssignPublications" class="form-check-label"></label>
					<div>
						<small>(@Html.DescriptionFor(m => m.Role.AutoAssignPublications))</small>
					</div>
				</div>
			</fieldset>
		</column>
	</row>
	<row>
		<column class="col-lg-5">
			<label asp-for="Role.Links" class="form-control-label"></label>
			<string-list asp-for="Role.Links" />
		</column>
	</row>
	<fieldset>
		<label asp-for="Role.SelectedPermissions" class="form-control-label"></label>
		<select asp-for="Role.SelectedPermissions" size="@(Math.Min(Model.Role.SelectedPermissions.Count, 7).ToString())" asp-items="Model.AvailablePermissions" class="form-select"></select>
	</fieldset>
	<fieldset class="d-none" id="assignable-permissions-section">
		<label asp-for="Role.SelectedAssignablePermissions" class="form-control-label"></label>
		<select asp-for="Role.SelectedAssignablePermissions" size="@(Math.Min(Model.Role.SelectedAssignablePermissions.Count, 7).ToString())" asp-items="Model.AvailableAssignablePermissions" class="form-select"></select>
		<row class="mt-3">
			<column sm="5" class="offset-sm-7">
				<label class="form-control-label">Roles that can be assigned:</label>
				<div id="assignable-roles">None</div>
			</column>
		</row>
	</fieldset>
	<div class="text-center mt-3">
		<submit-button class="btn btn-primary"><i class="fa fa-save"></i> @(Model.Id.HasValue ? "Save" : "Create")</submit-button>
		<a asp-page="List" class="btn btn-secondary"><i class="fa fa-times"></i> Cancel</a>
	</div>
</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script src="/js/select-improver.js"></script>
	<script>
		engageSelectImprover('@Html.IdFor(m => m.Role.SelectedPermissions)');
		engageSelectImprover('@Html.IdFor(m => m.Role.SelectedAssignablePermissions)');

		const selectedPermissionsModelName = '@Html.NameFor(m => m.Role.SelectedPermissions)';
		const selectedAssignableModelName = '@Html.NameFor(m => m.Role.SelectedAssignablePermissions)';
		const assignRolesValue = '@((int)PermissionTo.AssignRoles)';

		const selectedPermElem = document.querySelector(`[name="${selectedPermissionsModelName}"]`);
		const selectedAssignablePermElem = document.querySelector(`[name="${selectedAssignableModelName}"]`);

		function shouldShowAssignRoles() {
			const hasAssign = Boolean(document.querySelector(`[name="${selectedPermissionsModelName}"] option:checked[value="${assignRolesValue}"]`));
			const hasAtLeastOneOtherPerm = document.querySelectorAll(`[name="${selectedPermissionsModelName}"] option:checked`).length > 1;

			return hasAssign && hasAtLeastOneOtherPerm;
		}

		function syncAssignablePerms() {
			// remove all non-selected permissions from assignable permissions
			[...selectedAssignablePermElem.options]
				.filter(option => ![...selectedPermElem.options]
					.filter(o => o.selected)
					.find(o => o.value == option.value))
				.forEach(option => option.remove());

			// add all missing selected permissions to assignable permissions
			[...selectedPermElem.options]
				.filter(option => option.selected && ![...selectedAssignablePermElem.options]
					.find(o => o.value == option.value))
				.forEach(option => {
					const newOption = document.createElement('option');
					newOption.value = option.value;
					newOption.text = option.text;
					selectedAssignablePermElem.add(newOption);
				});

			engageSelectImprover('@Html.IdFor(m => m.Role.SelectedAssignablePermissions)');

			showRolesCurrentlyAssignable();
		}

		function showRolesCurrentlyAssignable() {
			const permissions = Array
				.from(document.querySelectorAll(`[name="${selectedAssignableModelName}"] option:checked`))
				.map(element => element.value);

			if (!permissions.length) {
				document.getElementById("assignable-roles").textContent = 'None';
				return;
			}
			const selectedOptions = [...selectedAssignablePermElem].filter(option => option.selected).map(option => option.value);
			const url = `/Roles/AddEdit/@(Model.Id)?handler=RolesThatCanBeAssignedBy&ids=${selectedOptions.join('&ids=')}`;
			fetch(url)
				.then(handleFetchErrors)
				.then(r => r.json())
				.then(json => {
					if (json.length > 0) {
						document.getElementById("assignable-roles").textContent = json.join(', ');
					} else {
						document.getElementById("assignable-roles").textContent = 'None';
					}
				});
		}

		function onSelectedPermissionsChange() {
			if (shouldShowAssignRoles()) {
				document.getElementById('assignable-permissions-section').classList.remove('d-none');
				syncAssignablePerms();
			} else {
				document.getElementById('assignable-permissions-section').classList.add('d-none');
			}
		}

		selectedPermElem.addEventListener('change', onSelectedPermissionsChange);
		document.addEventListener("DOMContentLoaded", onSelectedPermissionsChange);
		selectedAssignablePermElem.addEventListener('change', showRolesCurrentlyAssignable);
	</script>
}

