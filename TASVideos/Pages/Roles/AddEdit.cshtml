@page "{id?}/{handler?}"
@model TASVideos.Pages.Roles.AddEditModel
@{
	ViewData["Title"] = Model.Role.Id.HasValue ? "Modifying Role: " + Model.Role.Name : "Create a New Role";
}
<delete-button
	condition="@Model.Role.Id.HasValue && ViewData.UserHas(PermissionTo.DeleteRoles)"
	asp-href="@($"/Roles/AddEdit/{Model.Role.Id}/Delete")"
	warning-message="Are you sure you want to delete this Role? This action cannot be undone!"
	class="float-right text-center">
	Delete
</delete-button>
<h4>@ViewData["Title"]</h4>
<hr />
<form asp-route="Edit">
	<input type="hidden" asp-for="@Model.Role.Id" />
	<row>
		<div class="col-lg-5">
			<label asp-for="Role.Name" class="form-control-label"></label>
			<input asp-for="Role.Name" class="form-control" maxlength="50" />
			<span asp-validation-for="Role.Name" class="text-danger"></span>
		</div>
		<div class="offset-lg-2 col-lg-5">
			<label asp-for="Role.Description" class="form-control-label"></label>
			<textarea asp-for="Role.Description" class="form-control" rows="3" maxlength="200"></textarea>
			<span asp-validation-for="Role.Description" class="text-danger"></span>
		</div>
	</row>
	<row>
		<div class="col-lg-5">
			<label asp-for="Role.Links" class="form-control-label"></label>
			<string-list asp-for="Role.Links" />
		</div>
	</row>
	<form-group>
		<two-column-select id-list="Role.SelectedPermissions" available-list="AvailablePermissions" />
	</form-group>
	<form-group class="d-none" id="assignable-permissions-section">
		<two-column-select id-list="Role.SelectedAssignablePermissions" available-list="AvailableAssignablePermissions" />
		<row class="mt-3">
			<div class="offset-sm-7 col-sm-5">
				<label class="form-control-label">Roles that can be assigned:</label>
				<div id="assignable-roles">None</div>
			</div>
		</row>
	</form-group>
	<div class="text-center mt-3">
		<button type="submit" class="btn btn-primary">@(Model.Role.Id.HasValue ? "Update" : "Save")</button>
		<a asp-page="List" class="btn btn-secondary">Cancel</a>
	</div>
</form>
<script>
	(function() {
		var emptyAssignableRoles = "None";
		var assignRoles = '@((int)PermissionTo.AssignRoles)';
		var selectedAssignablePermissionsModelId = '@Html.NameFor(m => m.Role.SelectedAssignablePermissions)';
		var selectedPermissionsListId = 'Selected@(Html.IdFor(m => m.Role.SelectedPermissions))';
		var availableAssignableListId = '@Html.NameFor(m => m.AvailableAssignablePermissions)';
		var selectedAssignableListId = 'Selected@(Html.NameFor(m => m.Role.SelectedAssignablePermissions))';
		
		function shouldShowAssignRoles() {
			var hasAssign = document.querySelectorAll("[name='@Html.NameFor(m => m.Role.SelectedPermissions)']")
				.toArray()
				.filter(function(i) {
					return i.value === assignRoles;
				})
				.length >
				0;

			var hasAtLastOneOtherPerm = document.querySelectorAll("[name='@Html.NameFor(m => m.Role.SelectedPermissions)']")
				.toArray()
				.filter(function(i) {
					return i.value !== assignRoles;
				})
				.length >
				0;

			return hasAssign && hasAtLastOneOtherPerm;
		}

		function syncAssignablePerms() {
			var selectedPerms = document.querySelectorAll('#' + selectedPermissionsListId + ' option')
				.toArray()
				.filter(function(elem) {
					return elem.value !== assignRoles;
				});

			var aggregatedAssignablePerms = document.querySelectorAll('#' + availableAssignableListId + ' option')
				.toArray()
				.concat(document.querySelectorAll('#' + selectedAssignableListId + ' option').toArray());

			var addedPerms = selectedPerms
				.filter(function(elem) {
					return !(aggregatedAssignablePerms
						.map(function(e) {
							return e.value;
						})
						.includes(elem.value));
				});

			var removedPerms = aggregatedAssignablePerms
				.filter(function(elem) {
					return !(selectedPerms
						.map(function(e) {
							return e.value;
						})
						.includes(elem.value));
				});

			var availAssignableElem = document.getElementById(availableAssignableListId);
			var selectedAssignableElem = document.getElementById(selectedAssignableListId);

			addedPerms.forEach(function(elem) {
				if (elem.value !== assignRoles) {
					availAssignableElem.appendChild(elem.cloneNode(true));
				}
			});

			removedPerms.forEach(function(elem) {
				var id = document.querySelector('[name="' + selectedAssignablePermissionsModelId + '"][v="' + elem.value + '"]');
				if (id) {
					id.remove();
				}


				if (availAssignableElem.childNodes.toArray().includes(elem)) {
					availAssignableElem.removeChild(elem);
				} else if (selectedAssignableElem.childNodes.toArray().includes(elem)) {
					selectedAssignableElem.removeChild(elem);
				}
			});

			showRolesCurrentlyAssignable();
		}

		function showRolesCurrentlyAssignable() {
			var selector = '[name="' + selectedAssignablePermissionsModelId + '"]';
			var permissions = document.querySelectorAll(selector)
				.toArray()
				.map(function(elem) {
					return elem.value;
				});

			if (permissions.length > 0) {
				var xmlhttp = new XMLHttpRequest();
				xmlhttp.onreadystatechange = function() {
					if (xmlhttp.readyState === XMLHttpRequest.DONE) {
						if (xmlhttp.status === 200) {
							var data = JSON.parse(xmlhttp.responseText);
							if (data) {
								document.getElementById("assignable-roles").textContent = data.join(', ');
							} else {
								document.getElementById("assignable-roles").textContent = emptyAssignableRoles;
							}
						}
					}
				};

				var getStr = '';
				for (var i in permissions) {
					if (permissions.hasOwnProperty(i)) {
						getStr += 'ids=' + permissions[i] + '&';
					}
				}

				getStr = getStr.slice(0, -1);
				getStr = "/Roles/@(nameof(RolesController.RolesThatCanBeAssignedBy))?" + getStr;
				xmlhttp.open("GET", getStr, true);
				xmlhttp.send();
			} else {
				document.getElementById("assignable-roles").textContent = emptyAssignableRoles;
			}
		}

		function onSelectedPermissionsChange() {
			if (shouldShowAssignRoles()) {
				document.getElementById('assignable-permissions-section').classList.remove('d-none');
				syncAssignablePerms();
			} else {
				document.getElementById('assignable-permissions-section').classList.add('d-none');
			}
		}

		document.getElementById('@(Html.IdFor(m => m.Role.SelectedPermissions))-two-column-select')
			.addEventListener('@Html.NameFor(m => m.Role.SelectedPermissions)Changed', onSelectedPermissionsChange);

		document.addEventListener("DOMContentLoaded", onSelectedPermissionsChange);

		document.getElementById('@(Html.IdFor(m => m.Role.SelectedAssignablePermissions))-two-column-select')
			.addEventListener('@Html.NameFor(m => m.Role.SelectedAssignablePermissions)Changed', showRolesCurrentlyAssignable);
	})();
</script>
@section Scripts {
	<partial name="_ValidationScriptsPartial" />
}

