@page
@using System.Globalization
@inject AppSettings Settings
@model PublicationsModel
@{
	Layout = null;
	const string title = "TASVideos Publications";
	const string link = "NewMovies";
}
<?xml version="1.0" encoding="utf-8"?>
<rss>
	<channel>
		<partial model="@((title, link))" name="_RssChannel" />
		<atom:link rel="self" type="application/rss+xml" href="@(Settings.BaseUrl)/publications.rss" />
		@foreach (var pub in Model.Publications)
		{
			var movieUrl = $"{Settings.BaseUrl}/{pub.Id}M";
			var primaryStreaming = pub.StreamingUrls.FirstOrDefault(u => u.Contains("youtube"));
			var secondaryStreaming = pub.StreamingUrls.Where(u => u != primaryStreaming);
			<item>
				<title>@pub.Title</title>
				<rss-link>@movieUrl</rss-link>
				<description>
					<html-encode>
						<wiki-markup markup="@pub.Wiki?.Markup" page-data="@pub.Wiki"></wiki-markup>
					</html-encode>
				</description>
				@foreach (var tag in pub.TagNames)
				{
					<category>@tag</category>
				}
				<media:content url="@(movieUrl)?handler=Download" fileSize="@pub.MovieFileSize" type="application/zip" medium="document" />
				<media:thumbnail url="@(Settings.BaseUrl)/media/@pub.ScreenshotPath" />
				@foreach (var url in secondaryStreaming)
				{
					<media:content url="@url" type="video" medium="video" />
				}
				<media:player url="@primaryStreaming" />
				<media:community>
					<media:starRating average="@pub.RatingAverage" count="@pub.Ratings.Count" min="@pub.RatingMin" max="@pub.RatingMax" />
				</media:community>
				<guid>@movieUrl</guid>
				<pubDate>@pub.CreateTimestamp.ToString("r", CultureInfo.InvariantCulture)</pubDate>
			</item>
		}
	</channel>
</rss>