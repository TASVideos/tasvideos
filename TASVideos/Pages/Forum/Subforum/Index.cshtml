@page "{id}"
@using TASVideos.Data.Entity.Forum
@model IndexModel
@{
	ViewData["Title"] = $"{Model.Forum.Name} - Subforum";
}

@section PageTitle {
	<div class="container mb-2">
		<nav aria-label="breadcrumb" class="card card-header">
			<ol class="breadcrumb m-0">
				<li class="breadcrumb-item"><a asp-page="/Forum/Index">Forum</a></li>
				<li class="breadcrumb-item active" aria-current="page"><h1>@Model.Forum.Name</h1></li>
			</ol>
		</nav>
	</div>
}

<partial Name="_ForumHeader" />
<a permission="EditForums" asp-page="Edit" asp-route-id="@Model.Forum.Id" class="ms-2 float-end btn btn-primary btn-sm border border-warning"><i class="fa fa-pencil"></i> Edit</a>
<a permission="CreateForumTopics" asp-page="/Forum/Topics/Create" asp-route-forumId="@Model.Forum.Id" class="ms-2 float-end btn btn-primary btn-sm"><span class="fa fa-plus"></span> New Topic</a>
<a class="ms-2 float-end btn btn-secondary btn-sm" onclick="markSubforumPostsRead()">Mark Posts as read</a>
<div>
	<small>@Html.Raw(Model.Forum.Description)</small>
</div>
<hr />
<partial name="_Pager" model="Model.Forum.Topics" />
<div class="table-container">
	<table class="table table-striped table-bordered">
		<sortable-table-head sorting="@Model.Search" model-type="typeof(Models.ForumDisplayModel.ForumTopicEntry)" page-override="@HttpContext.Request.Path"/>
		@foreach (var topic in Model.Forum.Topics)
		{
			<tr>
				<td>
					<span condition="@(topic.Type == ForumTopicType.Announcement)" class="fw-bold text-warning"><i class="fa fa-bullhorn"></i> Announcement: </span>
					<span condition="@(topic.Type == ForumTopicType.Sticky)" class="fw-bold text-info"><i class="fa fa-sticky-note"></i> Sticky: </span>
					<span condition="@topic.IsLocked" class="text-danger"><i class="fa fa-lock"></i></span>
					<a condition="@(Model.ActivityTopics.ContainsKey(topic.Id))" class="text-decoration-none">
						<i class="fa fa-file activity-topic d-none"
						data-topic-id="@topic.Id"
						data-activity-posts-created="@Model.ActivityTopics[topic.Id].Item1"
					    data-activity-posts-edited="@Model.ActivityTopics[topic.Id].Item2"></i>
					</a>
					<a asp-page="/Forum/Topics/Index" asp-route-id="@topic.Id" class="fw-bold">@topic.Title</a>
					<div class="ms-2">
						@{
							var totalPages = (topic.PostCount - 1) / ForumConstants.PostsPerPage + 1;
							if (totalPages > 1)
							{
								for (int pageNumber = 1; pageNumber <= totalPages; pageNumber++)
								{
										<text>
											<a asp-page="/Forum/Topics/Index"
										   asp-route-id="@topic.Id"
										   asp-route-CurrentPage="@pageNumber"
										   asp-route-PageSize="@ForumConstants.PostsPerPage"
										   asp-route-Sort="CreateTimestamp"
										   class="btn btn-outline-primary btn-sm mt-1">
												@pageNumber
											</a>
										</text>
									if (totalPages > 5 && pageNumber == 2)
									{
										pageNumber = totalPages - 2;
											<text><span>…</span></text>
									}
								}
							}
						}
					</div>
				</td>
				<td class="d-none d-md-table-cell">@Math.Max(0, topic.PostCount - 1)</td> @*Imported Submission Topics will have no replies and no original post*@
				<td class="d-none d-md-table-cell"> <profile-link username="@topic.CreateUserName"></profile-link></td>
				<td>
					@if (topic.LastPost != null)
					{
						<timezone-convert asp-for="@topic.LastPost.CreateTimestamp" /> <br />
						<profile-link username="@topic.LastPost.PosterName"></profile-link>
						<a href="/Forum/Posts/@topic.LastPost.Id" class="fa fa-arrow-circle-right" />
					}
				</td>
			</tr>
		}
	</table>
</div>
<partial name="_Pager" model="Model.Forum.Topics" />

<span id="serverUnixTime" class="d-none">@DateTime.UtcNow.UnixTimestamp()</span>
@section Scripts {
	<script>
		let currentTime = Number(document.getElementById('serverUnixTime').textContent);
		{
			let visitedPosts = localStorage.getItem('VisitedPosts');
			visitedPosts = JSON.parse(visitedPosts) ?? {};
			let activityTopics = document.getElementsByClassName('activity-topic');
			for (let activityTopic of activityTopics) {
				let displayClass;
				let firstPostId, firstPostDate;
				let activityPostsCreated = activityTopic.dataset.activityPostsCreated ? JSON.parse(activityTopic.dataset.activityPostsCreated) : {};
				for (let postId in activityPostsCreated) {
					let lastVisit = visitedPosts[postId];
					if (!lastVisit || lastVisit < activityPostsCreated[postId]) {
						displayClass = 'text-warning';
						if (!firstPostId || activityPostsCreated[postId] < firstPostDate) {
							firstPostId = postId;
							firstPostDate = activityPostsCreated[postId];
						}
					}
				}
				if (!displayClass) {
					let activityPostsEdited = activityTopic.dataset.activityPostsEdited ? JSON.parse(activityTopic.dataset.activityPostsEdited) : {};
					for (let postId in activityPostsEdited) {
						let lastVisit = visitedPosts[postId];
						if (!lastVisit || lastVisit < activityPostsEdited[postId]) {
							displayClass = 'text-info';
							if (!firstPostId || activityPostsEdited[postId] < firstPostDate) {
								firstPostId = postId;
								firstPostDate = activityPostsEdited[postId];
							}
						}
					}
				}
				if (displayClass) {
					activityTopic.classList.add(displayClass);
					activityTopic.classList.remove('d-none');
					activityTopic.parentElement.setAttribute('href', '/Forum/Posts/' + firstPostId);
				}
			}
		}
		function markSubforumPostsRead(){
			let visitedPosts = localStorage.getItem('VisitedPosts');
			visitedPosts = JSON.parse(visitedPosts) ?? {};
			let activityTopics = document.getElementsByClassName('activity-topic');
			for (let activityTopic of activityTopics) {
				let activityPostsCreated = activityTopic.dataset.activityPostsCreated ? JSON.parse(activityTopic.dataset.activityPostsCreated) : {};
				for (let postId in activityPostsCreated) {
					visitedPosts[postId] = currentTime;
				}
				let activityPostsEdited = activityTopic.dataset.activityPostsEdited ? JSON.parse(activityTopic.dataset.activityPostsEdited) : {};
				for (let postId in activityPostsEdited) {
					visitedPosts[postId] = currentTime;
				}
			}
			localStorage.setItem('VisitedPosts', JSON.stringify(visitedPosts));
			location.reload();
		}
	</script>
}
