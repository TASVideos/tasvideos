@page
@model UploadModel

@{
	ViewData.SetTitle("Upload a User file");
}

<info-alert dismissible="true">
	@await Component.RenderWiki(SystemWiki.UserFileUploadHeader)
</info-alert>

<partial name="Shared/_StorageUsed" model="Model.StorageUsed" />
<hr />
<form method="post" enctype="multipart/form-data">
	<row>
		<column>
			<fieldset>
				<label asp-for="UserFile.File" class="form-control-label"></label>
				<input asp-for="UserFile.File" class="form-control" />
				<small>Valid file types: @string.Join(", ", Model.SupportedFileExtensions)</small><br />
				<span id="FileInputWarning" asp-validation-for="UserFile.File" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<label asp-for="UserFile.Title" class="form-control-label"></label>
				<input asp-for="UserFile.Title" type="text" class="form-control" />
				<span asp-validation-for="UserFile.Title" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<div>
					<partial name="_WikiEditHelper" model="@("UserFile_Description")"/>
				</div>
				<label asp-for="UserFile.Description" class="form-control-label"></label>
				<textarea asp-for="UserFile.Description" rows="6" class="form-control wiki-edit" placeholder="Enter your __wiki markup__ here..."></textarea>
				<span asp-validation-for="UserFile.Description" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<div class="form-check">
					<input type="checkbox" class="form-check-input" asp-for="UserFile.Hidden">
					<label class="form-check-label form-control-label" asp-for="UserFile.Hidden"></label>
				</div>
			</fieldset>
			<hr />
			<fieldset>
				<label asp-for="UserFile.SystemId" class="form-control-label"></label>
				<select asp-for="UserFile.SystemId" asp-items="@Model.AvailableSystems" class="form-control"></select>
				<span asp-validation-for="UserFile.SystemId" class="text-danger"></span>
			</fieldset>
			<fieldset>
				<label asp-for="UserFile.GameId" class="form-control-label"></label>
				<select asp-for="UserFile.GameId" asp-items="@Model.AvailableGames" class="form-control"></select>
				<span asp-validation-for="UserFile.GameId" class="text-danger"></span>
			</fieldset>
		</column>
	</row>
	<fullrow class="text-center">
		@await Component.RenderWiki(SystemWiki.WikiEditNote)
		<button type="button" class="btn btn-secondary" id="preview-button">Preview</button>
		<submit-button class="btn btn-primary"><i class="fa fa-upload"></i> Upload</submit-button>
		<a href="/Profile/UserFiles" class="btn btn-secondary"><i class="fa fa-times"></i> Cancel</a>
	</fullrow>
</form>

<partial name="_PreviewWindow" model="@(Html.IdFor(m => m.UserFile.Description), "/Wiki/Preview")" />

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script src="/js/userfile.js"></script>
	<script>
		const gameId = "@Html.IdFor(m => m.UserFile.GameId)";
		const systemId = "@Html.IdFor(m => m.UserFile.SystemId)";
		enableUserFile(gameId, systemId);
	</script>
	<script src="/js/pako_deflate.min.js"></script>
	<script>
		
		"use strict";
		{
			const fileInput = document.getElementById("@Html.IdFor(m => m.UserFile.File)");
			const storageAvailable = parseFloat(document.getElementById("StorageAvailable").value);
			const supportedFileExtensions = '@string.Join(",", Model.SupportedFileExtensions)'.split(',');
			const fileInputWarning = document.getElementById("FileInputWarning");
			fileInput.addEventListener("input", async () => {
				const inputFile = fileInput.files[0];
				if (!inputFile) {
					return;
				}

				const ext = (s => s.substring(s.lastIndexOf('.') + 1))(fileInput.files[0].name);
				if (ext) {
					if (supportedFileExtensions.includes(ext)) {
						fileInputWarning.innerText = "";
					} else {
						fileInput.value = "";
						fileInputWarning.innerText = `Invalid file extension: ${ext}`;
						return;
					}
				}

				const inputBytes = await inputFile.arrayBuffer();
				const zippedBytes = pako.gzip(inputBytes);

				const newFile = new File([zippedBytes], inputFile.name, { type: inputFile.type, lastModified: inputFile.lastModified });
				if (newFile.size < storageAvailable) {
					const dto = new DataTransfer;
					dto.items.add(newFile);
					fileInput.files = dto.files;
					fileInputWarning.innerText = "";
				} else {
					fileInput.value = "";
					fileInputWarning.innerText = "Chosen File Exceeds Quota";
				}
			});
		}
	</script>
}
