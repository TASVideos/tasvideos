// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using TASVideos.Data;

namespace TASVideos.Data.Migrations
{
	[DbContext(typeof(ApplicationDbContext))]
	[Migration("20220121170630_InitialCreate")]
	partial class InitialCreate
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasPostgresExtension("citext")
				.HasPostgresExtension("pg_trgm")
				.HasAnnotation("Relational:MaxIdentifierLength", 63)
				.HasAnnotation("ProductVersion", "5.0.3")
				.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

			modelBuilder.Entity("TASVideos.Data.Entity.Awards.Award", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Description")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<string>("ShortName")
						.IsRequired()
						.HasMaxLength(25)
						.HasColumnType("citext")
						.HasColumnName("short_name");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.HasKey("Id")
						.HasName("pk_awards");

					b.ToTable("awards");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Awards.PublicationAward", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int>("AwardId")
						.HasColumnType("integer")
						.HasColumnName("award_id");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("Year")
						.HasColumnType("integer")
						.HasColumnName("year");

					b.HasKey("Id")
						.HasName("pk_publication_awards");

					b.HasIndex("AwardId")
						.HasDatabaseName("ix_publication_awards_award_id");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_awards_publication_id");

					b.ToTable("publication_awards");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Awards.UserAward", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int>("AwardId")
						.HasColumnType("integer")
						.HasColumnName("award_id");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("Year")
						.HasColumnType("integer")
						.HasColumnName("year");

					b.HasKey("Id")
						.HasName("pk_user_awards");

					b.HasIndex("AwardId")
						.HasDatabaseName("ix_user_awards_award_id");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_user_awards_user_id");

					b.ToTable("user_awards");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.DeprecatedMovieFormat", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<bool>("Deprecated")
						.HasColumnType("boolean")
						.HasColumnName("deprecated");

					b.Property<string>("FileExtension")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("file_extension");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.HasKey("Id")
						.HasName("pk_deprecated_movie_formats");

					b.HasIndex("FileExtension")
						.IsUnique()
						.HasDatabaseName("ix_deprecated_movie_formats_file_extension");

					b.ToTable("deprecated_movie_formats");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Flag", b =>
				{
					b.Property<int>("Id")
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("IconPath")
						.HasMaxLength(48)
						.HasColumnType("citext")
						.HasColumnName("icon_path");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("LinkPath")
						.HasMaxLength(48)
						.HasColumnType("citext")
						.HasColumnName("link_path");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(32)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<int?>("PermissionRestriction")
						.HasColumnType("integer")
						.HasColumnName("permission_restriction");

					b.Property<string>("Token")
						.IsRequired()
						.HasMaxLength(24)
						.HasColumnType("citext")
						.HasColumnName("token");

					b.HasKey("Id")
						.HasName("pk_flags");

					b.HasIndex("Token")
						.IsUnique()
						.HasDatabaseName("ix_flags_token");

					b.ToTable("flags");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int>("CategoryId")
						.HasColumnType("integer")
						.HasColumnName("category_id");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Description")
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<int>("Ordinal")
						.HasColumnType("integer")
						.HasColumnName("ordinal");

					b.Property<bool>("Restricted")
						.HasColumnType("boolean")
						.HasColumnName("restricted");

					b.Property<string>("ShortName")
						.IsRequired()
						.HasMaxLength(10)
						.HasColumnType("citext")
						.HasColumnName("short_name");

					b.HasKey("Id")
						.HasName("pk_forums");

					b.HasIndex("CategoryId")
						.HasDatabaseName("ix_forums_category_id");

					b.ToTable("forums");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumCategory", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Description")
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int>("Ordinal")
						.HasColumnType("integer")
						.HasColumnName("ordinal");

					b.Property<string>("Title")
						.IsRequired()
						.HasMaxLength(30)
						.HasColumnType("citext")
						.HasColumnName("title");

					b.HasKey("Id")
						.HasName("pk_forum_categories");

					b.ToTable("forum_categories");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPoll", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime?>("CloseDate")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("close_date");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<bool>("MultiSelect")
						.HasColumnType("boolean")
						.HasColumnName("multi_select");

					b.Property<string>("Question")
						.IsRequired()
						.HasMaxLength(500)
						.HasColumnType("citext")
						.HasColumnName("question");

					b.Property<int>("TopicId")
						.HasColumnType("integer")
						.HasColumnName("topic_id");

					b.HasKey("Id")
						.HasName("pk_forum_polls");

					b.ToTable("forum_polls");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int>("Ordinal")
						.HasColumnType("integer")
						.HasColumnName("ordinal");

					b.Property<int>("PollId")
						.HasColumnType("integer")
						.HasColumnName("poll_id");

					b.Property<string>("Text")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("text");

					b.HasKey("Id")
						.HasName("pk_forum_poll_options");

					b.HasIndex("PollId")
						.HasDatabaseName("ix_forum_poll_options_poll_id");

					b.ToTable("forum_poll_options");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOptionVote", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("IpAddress")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("ip_address");

					b.Property<int>("PollOptionId")
						.HasColumnType("integer")
						.HasColumnName("poll_option_id");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("Id")
						.HasName("pk_forum_poll_option_votes");

					b.HasIndex("PollOptionId")
						.HasDatabaseName("ix_forum_poll_option_votes_poll_option_id");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_forum_poll_option_votes_user_id");

					b.ToTable("forum_poll_option_votes");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPost", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<bool>("EnableBbCode")
						.HasColumnType("boolean")
						.HasColumnName("enable_bb_code");

					b.Property<bool>("EnableHtml")
						.HasColumnType("boolean")
						.HasColumnName("enable_html");

					b.Property<int>("ForumId")
						.HasColumnType("integer")
						.HasColumnName("forum_id");

					b.Property<string>("IpAddress")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("ip_address");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int>("PosterId")
						.HasColumnType("integer")
						.HasColumnName("poster_id");

					b.Property<int>("PosterMood")
						.HasColumnType("integer")
						.HasColumnName("poster_mood");

					b.Property<NpgsqlTsVector>("SearchVector")
						.IsRequired()
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("tsvector")
						.HasColumnName("search_vector")
						.HasAnnotation("Npgsql:TsVectorConfig", "english")
						.HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

					b.Property<string>("Subject")
						.HasMaxLength(500)
						.HasColumnType("citext")
						.HasColumnName("subject");

					b.Property<string>("Text")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("text");

					b.Property<int?>("TopicId")
						.HasColumnType("integer")
						.HasColumnName("topic_id");

					b.HasKey("Id")
						.HasName("pk_forum_posts");

					b.HasIndex("ForumId")
						.HasDatabaseName("ix_forum_posts_forum_id");

					b.HasIndex("PosterId")
						.HasDatabaseName("ix_forum_posts_poster_id");

					b.HasIndex("SearchVector")
						.HasDatabaseName("ix_forum_posts_search_vector")
						.HasMethod("GIN");

					b.HasIndex("Text")
						.HasDatabaseName("ix_forum_posts_text")
						.HasMethod("gin")
						.HasOperators(new[] { "gin_trgm_ops" });

					b.HasIndex("TopicId")
						.HasDatabaseName("ix_forum_posts_topic_id");

					b.ToTable("forum_posts");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<int>("ForumId")
						.HasColumnType("integer")
						.HasColumnName("forum_id");

					b.Property<bool>("IsLocked")
						.HasColumnType("boolean")
						.HasColumnName("is_locked");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int?>("PollId")
						.HasColumnType("integer")
						.HasColumnName("poll_id");

					b.Property<int>("PosterId")
						.HasColumnType("integer")
						.HasColumnName("poster_id");

					b.Property<int?>("SubmissionId")
						.HasColumnType("integer")
						.HasColumnName("submission_id");

					b.Property<string>("Title")
						.IsRequired()
						.HasMaxLength(500)
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.HasKey("Id")
						.HasName("pk_forum_topics");

					b.HasIndex("ForumId")
						.HasDatabaseName("ix_forum_topics_forum_id");

					b.HasIndex("PollId")
						.IsUnique()
						.HasDatabaseName("ix_forum_topics_poll_id");

					b.HasIndex("PosterId")
						.HasDatabaseName("ix_forum_topics_poster_id");

					b.HasIndex("SubmissionId")
						.IsUnique()
						.HasDatabaseName("ix_forum_topics_submission_id");

					b.ToTable("forum_topics");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopicWatch", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("ForumTopicId")
						.HasColumnType("integer")
						.HasColumnName("forum_topic_id");

					b.Property<bool>("IsNotified")
						.HasColumnType("boolean")
						.HasColumnName("is_notified");

					b.HasKey("UserId", "ForumTopicId")
						.HasName("pk_forum_topic_watches");

					b.HasIndex("ForumTopicId")
						.HasDatabaseName("ix_forum_topic_watches_forum_topic_id");

					b.ToTable("forum_topic_watches");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Abbreviation")
						.HasMaxLength(8)
						.HasColumnType("citext")
						.HasColumnName("abbreviation");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("display_name");

					b.Property<string>("GameResourcesPage")
						.HasMaxLength(300)
						.HasColumnType("citext")
						.HasColumnName("game_resources_page");

					b.Property<string>("GoodName")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("good_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("ScreenshotUrl")
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("screenshot_url");

					b.Property<string>("SearchKey")
						.HasMaxLength(64)
						.HasColumnType("citext")
						.HasColumnName("search_key");

					b.Property<int>("SystemId")
						.HasColumnType("integer")
						.HasColumnName("system_id");

					b.Property<string>("YoutubeTags")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("youtube_tags");

					b.HasKey("Id")
						.HasName("pk_games");

					b.HasIndex("SystemId")
						.HasDatabaseName("ix_games_system_id");

					b.ToTable("games");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGameGroup", b =>
				{
					b.Property<int>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<int>("GameGroupId")
						.HasColumnType("integer")
						.HasColumnName("game_group_id");

					b.HasKey("GameId", "GameGroupId")
						.HasName("pk_game_game_groups");

					b.HasIndex("GameGroupId")
						.HasDatabaseName("ix_game_game_groups_game_group_id");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_game_game_groups_game_id");

					b.ToTable("game_game_groups");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGenre", b =>
				{
					b.Property<int>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<int>("GenreId")
						.HasColumnType("integer")
						.HasColumnName("genre_id");

					b.HasKey("GameId", "GenreId")
						.HasName("pk_game_genres");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_game_genres_game_id");

					b.HasIndex("GenreId")
						.HasDatabaseName("ix_game_genres_genre_id");

					b.ToTable("game_genres");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGroup", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<string>("SearchKey")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("search_key");

					b.HasKey("Id")
						.HasName("pk_game_groups");

					b.HasIndex("Name")
						.IsUnique()
						.HasDatabaseName("ix_game_groups_name");

					b.ToTable("game_groups");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddress", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<long>("Address")
						.HasColumnType("bigint")
						.HasColumnName("address");

					b.Property<string>("Description")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<int>("Endian")
						.HasColumnType("integer")
						.HasColumnName("endian");

					b.Property<int?>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<int>("GameRamAddressDomainId")
						.HasColumnType("integer")
						.HasColumnName("game_ram_address_domain_id");

					b.Property<string>("LegacyGameName")
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("legacy_game_name");

					b.Property<int>("LegacySetId")
						.HasColumnType("integer")
						.HasColumnName("legacy_set_id");

					b.Property<int>("Signed")
						.HasColumnType("integer")
						.HasColumnName("signed");

					b.Property<int>("SystemId")
						.HasColumnType("integer")
						.HasColumnName("system_id");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.HasKey("Id")
						.HasName("pk_game_ram_addresses");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_game_ram_addresses_game_id");

					b.HasIndex("GameRamAddressDomainId")
						.HasDatabaseName("ix_game_ram_addresses_game_ram_address_domain_id");

					b.HasIndex("SystemId")
						.HasDatabaseName("ix_game_ram_addresses_system_id");

					b.ToTable("game_ram_addresses");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddressDomain", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int?>("GameSystemId")
						.HasColumnType("integer")
						.HasColumnName("game_system_id");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.HasKey("Id")
						.HasName("pk_game_ram_address_domains");

					b.HasIndex("GameSystemId")
						.HasDatabaseName("ix_game_ram_address_domains_game_system_id");

					b.ToTable("game_ram_address_domains");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<int>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Md5")
						.IsRequired()
						.HasMaxLength(32)
						.HasColumnType("citext")
						.HasColumnName("md5");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<string>("Region")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("region");

					b.Property<string>("Sha1")
						.IsRequired()
						.HasMaxLength(40)
						.HasColumnType("citext")
						.HasColumnName("sha1");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.Property<string>("Version")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("version");

					b.HasKey("Id")
						.HasName("pk_game_roms");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_game_roms_game_id");

					b.HasIndex("Md5")
						.IsUnique()
						.HasDatabaseName("ix_game_roms_md5");

					b.HasIndex("Sha1")
						.IsUnique()
						.HasDatabaseName("ix_game_roms_sha1");

					b.ToTable("game_roms");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystem", b =>
				{
					b.Property<int>("Id")
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<string>("Code")
						.IsRequired()
						.HasMaxLength(8)
						.HasColumnType("citext")
						.HasColumnName("code");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("display_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.HasKey("Id")
						.HasName("pk_game_systems");

					b.HasIndex("Code")
						.IsUnique()
						.HasDatabaseName("ix_game_systems_code");

					b.ToTable("game_systems");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystemFrameRate", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<double>("FrameRate")
						.HasColumnType("double precision")
						.HasColumnName("frame_rate");

					b.Property<int>("GameSystemId")
						.HasColumnType("integer")
						.HasColumnName("game_system_id");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<bool>("Obsolete")
						.ValueGeneratedOnAdd()
						.HasColumnType("boolean")
						.HasDefaultValue(false)
						.HasColumnName("obsolete");

					b.Property<bool>("Preliminary")
						.HasColumnType("boolean")
						.HasColumnName("preliminary");

					b.Property<string>("RegionCode")
						.IsRequired()
						.HasMaxLength(8)
						.HasColumnType("citext")
						.HasColumnName("region_code");

					b.HasKey("Id")
						.HasName("pk_game_system_frame_rates");

					b.HasIndex("GameSystemId")
						.HasDatabaseName("ix_game_system_frame_rates_game_system_id");

					b.ToTable("game_system_frame_rates");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.Genre", b =>
				{
					b.Property<int>("Id")
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("citext")
						.HasColumnName("display_name");

					b.HasKey("Id")
						.HasName("pk_genres");

					b.ToTable("genres");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.IpBan", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Mask")
						.IsRequired()
						.HasMaxLength(40)
						.HasColumnType("citext")
						.HasColumnName("mask");

					b.HasKey("Id")
						.HasName("pk_ip_bans");

					b.HasIndex("Mask")
						.IsUnique()
						.HasDatabaseName("ix_ip_bans_mask");

					b.ToTable("ip_bans");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.MediaPost", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Body")
						.IsRequired()
						.HasMaxLength(1024)
						.HasColumnType("citext")
						.HasColumnName("body");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Group")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("group");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Link")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("link");

					b.Property<string>("Title")
						.IsRequired()
						.HasMaxLength(512)
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<string>("Type")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("type");

					b.Property<string>("User")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("user");

					b.HasKey("Id")
						.HasName("pk_media_posts");

					b.ToTable("media_posts");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PrivateMessage", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<bool>("DeletedForFromUser")
						.HasColumnType("boolean")
						.HasColumnName("deleted_for_from_user");

					b.Property<bool>("DeletedForToUser")
						.HasColumnType("boolean")
						.HasColumnName("deleted_for_to_user");

					b.Property<bool>("EnableBbCode")
						.HasColumnType("boolean")
						.HasColumnName("enable_bb_code");

					b.Property<bool>("EnableHtml")
						.HasColumnType("boolean")
						.HasColumnName("enable_html");

					b.Property<int>("FromUserId")
						.HasColumnType("integer")
						.HasColumnName("from_user_id");

					b.Property<string>("IpAddress")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("ip_address");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<DateTime?>("ReadOn")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("read_on");

					b.Property<bool>("SavedForFromUser")
						.HasColumnType("boolean")
						.HasColumnName("saved_for_from_user");

					b.Property<bool>("SavedForToUser")
						.HasColumnType("boolean")
						.HasColumnName("saved_for_to_user");

					b.Property<string>("Subject")
						.HasMaxLength(500)
						.HasColumnType("citext")
						.HasColumnName("subject");

					b.Property<string>("Text")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("text");

					b.Property<int>("ToUserId")
						.HasColumnType("integer")
						.HasColumnName("to_user_id");

					b.HasKey("Id")
						.HasName("pk_private_messages");

					b.HasIndex("FromUserId")
						.HasDatabaseName("ix_private_messages_from_user_id");

					b.HasIndex("ToUserId", "ReadOn", "DeletedForToUser")
						.HasDatabaseName("ix_private_messages_to_user_id_read_on_deleted_for_to_user");

					b.ToTable("private_messages");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("AdditionalAuthors")
						.HasMaxLength(200)
						.HasColumnType("citext")
						.HasColumnName("additional_authors");

					b.Property<string>("Branch")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("branch");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("EmulatorVersion")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("emulator_version");

					b.Property<int>("Frames")
						.HasColumnType("integer")
						.HasColumnName("frames");

					b.Property<int>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<byte[]>("MovieFile")
						.IsRequired()
						.HasColumnType("bytea")
						.HasColumnName("movie_file");

					b.Property<string>("MovieFileName")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("movie_file_name");

					b.Property<int?>("ObsoletedById")
						.HasColumnType("integer")
						.HasColumnName("obsoleted_by_id");

					b.Property<int>("PublicationClassId")
						.HasColumnType("integer")
						.HasColumnName("publication_class_id");

					b.Property<int>("RerecordCount")
						.HasColumnType("integer")
						.HasColumnName("rerecord_count");

					b.Property<int>("RomId")
						.HasColumnType("integer")
						.HasColumnName("rom_id");

					b.Property<int>("SubmissionId")
						.HasColumnType("integer")
						.HasColumnName("submission_id");

					b.Property<int>("SystemFrameRateId")
						.HasColumnType("integer")
						.HasColumnName("system_frame_rate_id");

					b.Property<int>("SystemId")
						.HasColumnType("integer")
						.HasColumnName("system_id");

					b.Property<string>("Title")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<int?>("WikiContentId")
						.HasColumnType("integer")
						.HasColumnName("wiki_content_id");

					b.HasKey("Id")
						.HasName("pk_publications");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_publications_game_id");

					b.HasIndex("ObsoletedById")
						.HasDatabaseName("ix_publications_obsoleted_by_id");

					b.HasIndex("PublicationClassId")
						.HasDatabaseName("ix_publications_publication_class_id");

					b.HasIndex("RomId")
						.HasDatabaseName("ix_publications_rom_id");

					b.HasIndex("SubmissionId")
						.IsUnique()
						.HasDatabaseName("ix_publications_submission_id");

					b.HasIndex("SystemFrameRateId")
						.HasDatabaseName("ix_publications_system_frame_rate_id");

					b.HasIndex("SystemId")
						.HasDatabaseName("ix_publications_system_id");

					b.HasIndex("WikiContentId")
						.HasDatabaseName("ix_publications_wiki_content_id");

					b.ToTable("publications");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationAuthor", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("Ordinal")
						.HasColumnType("integer")
						.HasColumnName("ordinal");

					b.HasKey("UserId", "PublicationId")
						.HasName("pk_publication_authors");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_authors_publication_id");

					b.ToTable("publication_authors");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationClass", b =>
				{
					b.Property<int>("Id")
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<string>("IconPath")
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("icon_path");

					b.Property<string>("Link")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("link");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<double>("Weight")
						.HasColumnType("double precision")
						.HasColumnName("weight");

					b.HasKey("Id")
						.HasName("pk_publication_classes");

					b.HasIndex("Name")
						.IsUnique()
						.HasDatabaseName("ix_publication_classes_name");

					b.ToTable("publication_classes");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationFile", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Description")
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<byte[]>("FileData")
						.HasColumnType("bytea")
						.HasColumnName("file_data");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Path")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("path");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.HasKey("Id")
						.HasName("pk_publication_files");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_files_publication_id");

					b.ToTable("publication_files");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationFlag", b =>
				{
					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("FlagId")
						.HasColumnType("integer")
						.HasColumnName("flag_id");

					b.HasKey("PublicationId", "FlagId")
						.HasName("pk_publication_flags");

					b.HasIndex("FlagId")
						.HasDatabaseName("ix_publication_flags_flag_id");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_flags_publication_id");

					b.ToTable("publication_flags");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationMaintenanceLog", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Log")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("log");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<DateTime>("TimeStamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("time_stamp");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("Id")
						.HasName("pk_publication_maintenance_logs");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_maintenance_logs_publication_id");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_publication_maintenance_logs_user_id");

					b.ToTable("publication_maintenance_logs");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationRating", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.Property<double>("Value")
						.HasColumnType("double precision")
						.HasColumnName("value");

					b.HasKey("UserId", "PublicationId", "Type")
						.HasName("pk_publication_ratings");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_ratings_publication_id");

					b.HasIndex("UserId", "PublicationId", "Type")
						.IsUnique()
						.HasDatabaseName("ix_publication_ratings_user_id_publication_id_type");

					b.ToTable("publication_ratings");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationTag", b =>
				{
					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("TagId")
						.HasColumnType("integer")
						.HasColumnName("tag_id");

					b.HasKey("PublicationId", "TagId")
						.HasName("pk_publication_tags");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_tags_publication_id");

					b.HasIndex("TagId")
						.HasDatabaseName("ix_publication_tags_tag_id");

					b.ToTable("publication_tags");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationUrl", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int>("PublicationId")
						.HasColumnType("integer")
						.HasColumnName("publication_id");

					b.Property<int>("Type")
						.HasColumnType("integer")
						.HasColumnName("type");

					b.Property<string>("Url")
						.IsRequired()
						.HasMaxLength(500)
						.HasColumnType("citext")
						.HasColumnName("url");

					b.HasKey("Id")
						.HasName("pk_publication_urls");

					b.HasIndex("PublicationId")
						.HasDatabaseName("ix_publication_urls_publication_id");

					b.HasIndex("Type")
						.HasDatabaseName("ix_publication_urls_type");

					b.ToTable("publication_urls");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Role", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int?>("AutoAssignPostCount")
						.HasColumnType("integer")
						.HasColumnName("auto_assign_post_count");

					b.Property<bool>("AutoAssignPublications")
						.HasColumnType("boolean")
						.HasColumnName("auto_assign_publications");

					b.Property<string>("ConcurrencyStamp")
						.HasColumnType("citext")
						.HasColumnName("concurrency_stamp");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Description")
						.IsRequired()
						.HasMaxLength(300)
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<bool>("IsDefault")
						.HasColumnType("boolean")
						.HasColumnName("is_default");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Name")
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<string>("NormalizedName")
						.HasColumnType("citext")
						.HasColumnName("normalized_name");

					b.HasKey("Id")
						.HasName("pk_roles");

					b.ToTable("roles");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.RoleClaim", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("citext")
						.HasColumnName("claim_type");

					b.Property<string>("ClaimValue")
						.HasColumnType("citext")
						.HasColumnName("claim_value");

					b.Property<int>("RoleId")
						.HasColumnType("integer")
						.HasColumnName("role_id");

					b.HasKey("Id")
						.HasName("pk_role_claims");

					b.HasIndex("RoleId")
						.HasDatabaseName("ix_role_claims_role_id");

					b.ToTable("role_claims");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.RoleLink", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Link")
						.IsRequired()
						.HasMaxLength(300)
						.HasColumnType("citext")
						.HasColumnName("link");

					b.Property<int?>("RoleId")
						.HasColumnType("integer")
						.HasColumnName("role_id");

					b.HasKey("Id")
						.HasName("pk_role_links");

					b.HasIndex("RoleId")
						.HasDatabaseName("ix_role_links_role_id");

					b.ToTable("role_links");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.RolePermission", b =>
				{
					b.Property<int>("RoleId")
						.HasColumnType("integer")
						.HasColumnName("role_id");

					b.Property<int>("PermissionId")
						.HasColumnType("integer")
						.HasColumnName("permission_id");

					b.Property<bool>("CanAssign")
						.HasColumnType("boolean")
						.HasColumnName("can_assign");

					b.HasKey("RoleId", "PermissionId")
						.HasName("pk_role_permission");

					b.ToTable("role_permission");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("AdditionalAuthors")
						.HasMaxLength(200)
						.HasColumnType("citext")
						.HasColumnName("additional_authors");

					b.Property<string>("Branch")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("branch");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("EmulatorVersion")
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("emulator_version");

					b.Property<string>("EncodeEmbedLink")
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("encode_embed_link");

					b.Property<int>("Frames")
						.HasColumnType("integer")
						.HasColumnName("frames");

					b.Property<int?>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<string>("GameName")
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("game_name");

					b.Property<string>("GameVersion")
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("game_version");

					b.Property<decimal>("ImportedTime")
						.ValueGeneratedOnAdd()
						.HasColumnType("decimal(16, 4)")
						.HasDefaultValue(0m)
						.HasColumnName("imported_time");

					b.Property<int?>("IntendedClassId")
						.HasColumnType("integer")
						.HasColumnName("intended_class_id");

					b.Property<int?>("JudgeId")
						.HasColumnType("integer")
						.HasColumnName("judge_id");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("LegacyAlerts")
						.HasMaxLength(4096)
						.HasColumnType("citext")
						.HasColumnName("legacy_alerts");

					b.Property<decimal>("LegacyTime")
						.ValueGeneratedOnAdd()
						.HasColumnType("decimal(16, 4)")
						.HasDefaultValue(0m)
						.HasColumnName("legacy_time");

					b.Property<string>("MovieExtension")
						.HasColumnType("citext")
						.HasColumnName("movie_extension");

					b.Property<byte[]>("MovieFile")
						.IsRequired()
						.HasColumnType("bytea")
						.HasColumnName("movie_file");

					b.Property<int?>("MovieStartType")
						.HasColumnType("integer")
						.HasColumnName("movie_start_type");

					b.Property<int?>("PublisherId")
						.HasColumnType("integer")
						.HasColumnName("publisher_id");

					b.Property<int?>("RejectionReasonId")
						.HasColumnType("integer")
						.HasColumnName("rejection_reason_id");

					b.Property<int>("RerecordCount")
						.HasColumnType("integer")
						.HasColumnName("rerecord_count");

					b.Property<int?>("RomId")
						.HasColumnType("integer")
						.HasColumnName("rom_id");

					b.Property<string>("RomName")
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("rom_name");

					b.Property<int>("Status")
						.HasColumnType("integer")
						.HasColumnName("status");

					b.Property<int?>("SubmitterId")
						.HasColumnType("integer")
						.HasColumnName("submitter_id");

					b.Property<int?>("SystemFrameRateId")
						.HasColumnType("integer")
						.HasColumnName("system_frame_rate_id");

					b.Property<int?>("SystemId")
						.HasColumnType("integer")
						.HasColumnName("system_id");

					b.Property<string>("Title")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<int?>("TopicId")
						.HasColumnType("integer")
						.HasColumnName("topic_id");

					b.Property<int?>("WikiContentId")
						.HasColumnType("integer")
						.HasColumnName("wiki_content_id");

					b.HasKey("Id")
						.HasName("pk_submissions");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_submissions_game_id");

					b.HasIndex("IntendedClassId")
						.HasDatabaseName("ix_submissions_intended_class_id");

					b.HasIndex("JudgeId")
						.HasDatabaseName("ix_submissions_judge_id");

					b.HasIndex("PublisherId")
						.HasDatabaseName("ix_submissions_publisher_id");

					b.HasIndex("RejectionReasonId")
						.HasDatabaseName("ix_submissions_rejection_reason_id");

					b.HasIndex("RomId")
						.HasDatabaseName("ix_submissions_rom_id");

					b.HasIndex("Status")
						.HasDatabaseName("ix_submissions_status");

					b.HasIndex("SubmitterId")
						.HasDatabaseName("ix_submissions_submitter_id");

					b.HasIndex("SystemFrameRateId")
						.HasDatabaseName("ix_submissions_system_frame_rate_id");

					b.HasIndex("SystemId")
						.HasDatabaseName("ix_submissions_system_id");

					b.HasIndex("WikiContentId")
						.HasDatabaseName("ix_submissions_wiki_content_id");

					b.ToTable("submissions");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.SubmissionAuthor", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("SubmissionId")
						.HasColumnType("integer")
						.HasColumnName("submission_id");

					b.Property<int>("Ordinal")
						.HasColumnType("integer")
						.HasColumnName("ordinal");

					b.HasKey("UserId", "SubmissionId")
						.HasName("pk_submission_authors");

					b.HasIndex("SubmissionId")
						.HasDatabaseName("ix_submission_authors_submission_id");

					b.ToTable("submission_authors");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.SubmissionRejectionReason", b =>
				{
					b.Property<int>("Id")
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("display_name");

					b.HasKey("Id")
						.HasName("pk_submission_rejection_reasons");

					b.HasIndex("DisplayName")
						.IsUnique()
						.HasDatabaseName("ix_submission_rejection_reasons_display_name");

					b.ToTable("submission_rejection_reasons");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.SubmissionStatusHistory", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<int>("Status")
						.HasColumnType("integer")
						.HasColumnName("status");

					b.Property<int>("SubmissionId")
						.HasColumnType("integer")
						.HasColumnName("submission_id");

					b.HasKey("Id")
						.HasName("pk_submission_status_history");

					b.HasIndex("SubmissionId")
						.HasDatabaseName("ix_submission_status_history_submission_id");

					b.ToTable("submission_status_history");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Tag", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Code")
						.IsRequired()
						.HasMaxLength(25)
						.HasColumnType("citext")
						.HasColumnName("code");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("citext")
						.HasColumnName("display_name");

					b.HasKey("Id")
						.HasName("pk_tags");

					b.HasIndex("Code")
						.IsUnique()
						.HasDatabaseName("ix_tags_code");

					b.ToTable("tags");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.User", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int>("AccessFailedCount")
						.HasColumnType("integer")
						.HasColumnName("access_failed_count");

					b.Property<string>("Avatar")
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("avatar");

					b.Property<string>("ConcurrencyStamp")
						.HasColumnType("citext")
						.HasColumnName("concurrency_stamp");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<string>("Email")
						.HasColumnType("citext")
						.HasColumnName("email");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("boolean")
						.HasColumnName("email_confirmed");

					b.Property<string>("From")
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("from");

					b.Property<DateTime?>("LastLoggedInTimeStamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_logged_in_time_stamp");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("LegacyPassword")
						.HasMaxLength(32)
						.HasColumnType("citext")
						.HasColumnName("legacy_password");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("boolean")
						.HasColumnName("lockout_enabled");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("timestamp with time zone")
						.HasColumnName("lockout_end");

					b.Property<string>("MoodAvatarUrlBase")
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("mood_avatar_url_base");

					b.Property<string>("NormalizedEmail")
						.HasColumnType("citext")
						.HasColumnName("normalized_email");

					b.Property<string>("NormalizedUserName")
						.HasColumnType("citext")
						.HasColumnName("normalized_user_name");

					b.Property<string>("PasswordHash")
						.HasColumnType("citext")
						.HasColumnName("password_hash");

					b.Property<string>("PhoneNumber")
						.HasColumnType("citext")
						.HasColumnName("phone_number");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("boolean")
						.HasColumnName("phone_number_confirmed");

					b.Property<int>("PreferredPronouns")
						.HasColumnType("integer")
						.HasColumnName("preferred_pronouns");

					b.Property<bool>("PublicRatings")
						.HasColumnType("boolean")
						.HasColumnName("public_ratings");

					b.Property<string>("SecurityStamp")
						.HasColumnType("citext")
						.HasColumnName("security_stamp");

					b.Property<string>("Signature")
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("signature");

					b.Property<string>("TimeZoneId")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("time_zone_id");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("boolean")
						.HasColumnName("two_factor_enabled");

					b.Property<bool>("UseRatings")
						.HasColumnType("boolean")
						.HasColumnName("use_ratings");

					b.Property<string>("UserName")
						.HasColumnType("citext")
						.HasColumnName("user_name");

					b.HasKey("Id")
						.HasName("pk_users");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("ix_users_normalized_user_name");

					b.ToTable("users");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserClaim", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("citext")
						.HasColumnName("claim_type");

					b.Property<string>("ClaimValue")
						.HasColumnType("citext")
						.HasColumnName("claim_value");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("Id")
						.HasName("pk_user_claims");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_user_claims_user_id");

					b.ToTable("user_claims");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserDisallow", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("RegexPattern")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("citext")
						.HasColumnName("regex_pattern");

					b.HasKey("Id")
						.HasName("pk_user_disallows");

					b.HasIndex("RegexPattern")
						.IsUnique()
						.HasDatabaseName("ix_user_disallows_regex_pattern");

					b.ToTable("user_disallows");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
				{
					b.Property<long>("Id")
						.HasColumnType("bigint")
						.HasColumnName("id")
						.HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

					b.Property<int>("AuthorId")
						.HasColumnType("integer")
						.HasColumnName("author_id");

					b.Property<int>("Class")
						.HasColumnType("integer")
						.HasColumnName("class");

					b.Property<int>("CompressionType")
						.HasColumnType("integer")
						.HasColumnName("compression_type");

					b.Property<byte[]>("Content")
						.IsRequired()
						.HasColumnType("bytea")
						.HasColumnName("content");

					b.Property<string>("Description")
						.HasColumnType("citext")
						.HasColumnName("description");

					b.Property<int>("Downloads")
						.HasColumnType("integer")
						.HasColumnName("downloads");

					b.Property<string>("FileName")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("file_name");

					b.Property<int>("Frames")
						.HasColumnType("integer")
						.HasColumnName("frames");

					b.Property<int?>("GameId")
						.HasColumnType("integer")
						.HasColumnName("game_id");

					b.Property<bool>("Hidden")
						.HasColumnType("boolean")
						.HasColumnName("hidden");

					b.Property<decimal>("Length")
						.HasColumnType("decimal(10, 3)")
						.HasColumnName("length");

					b.Property<int>("LogicalLength")
						.HasColumnType("integer")
						.HasColumnName("logical_length");

					b.Property<int>("PhysicalLength")
						.HasColumnType("integer")
						.HasColumnName("physical_length");

					b.Property<int>("Rerecords")
						.HasColumnType("integer")
						.HasColumnName("rerecords");

					b.Property<int?>("SystemId")
						.HasColumnType("integer")
						.HasColumnName("system_id");

					b.Property<string>("Title")
						.IsRequired()
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<string>("Type")
						.IsRequired()
						.HasMaxLength(16)
						.HasColumnType("citext")
						.HasColumnName("type");

					b.Property<DateTime>("UploadTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("upload_timestamp");

					b.Property<int>("Views")
						.HasColumnType("integer")
						.HasColumnName("views");

					b.Property<string>("Warnings")
						.HasColumnType("citext")
						.HasColumnName("warnings");

					b.HasKey("Id")
						.HasName("pk_user_files");

					b.HasIndex("AuthorId")
						.HasDatabaseName("ix_user_files_author_id");

					b.HasIndex("GameId")
						.HasDatabaseName("ix_user_files_game_id");

					b.HasIndex("Hidden")
						.HasDatabaseName("ix_user_files_hidden");

					b.HasIndex("SystemId")
						.HasDatabaseName("ix_user_files_system_id");

					b.ToTable("user_files");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<DateTime>("CreationTimeStamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("creation_time_stamp");

					b.Property<string>("Ip")
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("ip");

					b.Property<int?>("ParentId")
						.HasColumnType("integer")
						.HasColumnName("parent_id");

					b.Property<string>("Text")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("text");

					b.Property<string>("Title")
						.HasMaxLength(255)
						.HasColumnType("citext")
						.HasColumnName("title");

					b.Property<long>("UserFileId")
						.HasColumnType("bigint")
						.HasColumnName("user_file_id");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("Id")
						.HasName("pk_user_file_comments");

					b.HasIndex("ParentId")
						.HasDatabaseName("ix_user_file_comments_parent_id");

					b.HasIndex("UserFileId")
						.HasDatabaseName("ix_user_file_comments_user_file_id");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_user_file_comments_user_id");

					b.ToTable("user_file_comments");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserLogin", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("citext")
						.HasColumnName("login_provider");

					b.Property<string>("ProviderKey")
						.HasColumnType("citext")
						.HasColumnName("provider_key");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("citext")
						.HasColumnName("provider_display_name");

					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("LoginProvider", "ProviderKey")
						.HasName("pk_user_logins");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_user_logins_user_id");

					b.ToTable("user_logins");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserMaintenanceLog", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int?>("EditorId")
						.HasColumnType("integer")
						.HasColumnName("editor_id");

					b.Property<string>("Log")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("log");

					b.Property<DateTime>("TimeStamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("time_stamp");

					b.Property<int?>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.HasKey("Id")
						.HasName("pk_user_maintenance_logs");

					b.HasIndex("EditorId")
						.HasDatabaseName("ix_user_maintenance_logs_editor_id");

					b.HasIndex("UserId")
						.HasDatabaseName("ix_user_maintenance_logs_user_id");

					b.ToTable("user_maintenance_logs");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserRole", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<int>("RoleId")
						.HasColumnType("integer")
						.HasColumnName("role_id");

					b.HasKey("UserId", "RoleId")
						.HasName("pk_user_roles");

					b.HasIndex("RoleId")
						.HasDatabaseName("ix_user_roles_role_id");

					b.ToTable("user_roles");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserToken", b =>
				{
					b.Property<int>("UserId")
						.HasColumnType("integer")
						.HasColumnName("user_id");

					b.Property<string>("LoginProvider")
						.HasColumnType("citext")
						.HasColumnName("login_provider");

					b.Property<string>("Name")
						.HasColumnType("citext")
						.HasColumnName("name");

					b.Property<string>("Value")
						.HasColumnType("citext")
						.HasColumnName("value");

					b.HasKey("UserId", "LoginProvider", "Name")
						.HasName("pk_user_tokens");

					b.ToTable("user_tokens");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.WikiPage", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<int?>("AuthorId")
						.HasColumnType("integer")
						.HasColumnName("author_id");

					b.Property<int?>("ChildId")
						.HasColumnType("integer")
						.HasColumnName("child_id");

					b.Property<DateTime>("CreateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("create_timestamp");

					b.Property<string>("CreateUserName")
						.HasColumnType("citext")
						.HasColumnName("create_user_name");

					b.Property<bool>("IsDeleted")
						.HasColumnType("boolean")
						.HasColumnName("is_deleted");

					b.Property<DateTime>("LastUpdateTimestamp")
						.HasColumnType("timestamp without time zone")
						.HasColumnName("last_update_timestamp");

					b.Property<string>("LastUpdateUserName")
						.HasColumnType("citext")
						.HasColumnName("last_update_user_name");

					b.Property<string>("Markup")
						.IsRequired()
						.HasColumnType("citext")
						.HasColumnName("markup");

					b.Property<bool>("MinorEdit")
						.HasColumnType("boolean")
						.HasColumnName("minor_edit");

					b.Property<string>("PageName")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("page_name");

					b.Property<int>("Revision")
						.HasColumnType("integer")
						.HasColumnName("revision");

					b.Property<string>("RevisionMessage")
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("revision_message");

					b.Property<NpgsqlTsVector>("SearchVector")
						.IsRequired()
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("tsvector")
						.HasColumnName("search_vector")
						.HasAnnotation("Npgsql:TsVectorConfig", "english")
						.HasAnnotation("Npgsql:TsVectorProperties", new[] { "PageName", "Markup" });

					b.HasKey("Id")
						.HasName("pk_wiki_pages");

					b.HasIndex("AuthorId")
						.HasDatabaseName("ix_wiki_pages_author_id");

					b.HasIndex("ChildId")
						.HasDatabaseName("ix_wiki_pages_child_id");

					b.HasIndex("Markup")
						.HasDatabaseName("ix_wiki_pages_markup")
						.HasMethod("gin")
						.HasOperators(new[] { "gin_trgm_ops" });

					b.HasIndex("SearchVector")
						.HasDatabaseName("ix_wiki_pages_search_vector")
						.HasMethod("GIN");

					b.HasIndex("PageName", "Revision")
						.IsUnique()
						.HasDatabaseName("ix_wiki_pages_page_name_revision");

					b.ToTable("wiki_pages");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.WikiPageReferral", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer")
						.HasColumnName("id")
						.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

					b.Property<string>("Excerpt")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("excerpt");

					b.Property<string>("Referral")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("citext")
						.HasColumnName("referral");

					b.Property<string>("Referrer")
						.IsRequired()
						.HasMaxLength(250)
						.HasColumnType("citext")
						.HasColumnName("referrer");

					b.HasKey("Id")
						.HasName("pk_wiki_referrals");

					b.ToTable("wiki_referrals");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Awards.PublicationAward", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Awards.Award", "Award")
						.WithMany()
						.HasForeignKey("AwardId")
						.HasConstraintName("fk_publication_awards_awards_award_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationAwards")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_awards_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Award");

					b.Navigation("Publication");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Awards.UserAward", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Awards.Award", "Award")
						.WithMany()
						.HasForeignKey("AwardId")
						.HasConstraintName("fk_user_awards_awards_award_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("UserAwards")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_user_awards_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Award");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.ForumCategory", "Category")
						.WithMany("Forums")
						.HasForeignKey("CategoryId")
						.HasConstraintName("fk_forums_forum_categories_category_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Category");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.ForumPoll", "Poll")
						.WithMany("PollOptions")
						.HasForeignKey("PollId")
						.HasConstraintName("fk_forum_poll_options_forum_polls_poll_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Poll");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOptionVote", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.ForumPollOption", "PollOption")
						.WithMany("Votes")
						.HasForeignKey("PollOptionId")
						.HasConstraintName("fk_forum_poll_option_votes_forum_poll_options_poll_option_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany()
						.HasForeignKey("UserId")
						.HasConstraintName("fk_forum_poll_option_votes_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("PollOption");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPost", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.Forum", "Forum")
						.WithMany("ForumPosts")
						.HasForeignKey("ForumId")
						.HasConstraintName("fk_forum_posts_forums_forum_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "Poster")
						.WithMany("Posts")
						.HasForeignKey("PosterId")
						.HasConstraintName("fk_forum_posts_users_poster_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Forum.ForumTopic", "Topic")
						.WithMany("ForumPosts")
						.HasForeignKey("TopicId")
						.HasConstraintName("fk_forum_posts_forum_topics_topic_id");

					b.Navigation("Forum");

					b.Navigation("Poster");

					b.Navigation("Topic");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.Forum", "Forum")
						.WithMany("ForumTopics")
						.HasForeignKey("ForumId")
						.HasConstraintName("fk_forum_topics_forums_forum_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Forum.ForumPoll", "Poll")
						.WithOne("Topic")
						.HasForeignKey("TASVideos.Data.Entity.Forum.ForumTopic", "PollId")
						.HasConstraintName("fk_forum_topics_forum_polls_poll_id");

					b.HasOne("TASVideos.Data.Entity.User", "Poster")
						.WithMany("Topics")
						.HasForeignKey("PosterId")
						.HasConstraintName("fk_forum_topics_users_poster_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
						.WithOne("Topic")
						.HasForeignKey("TASVideos.Data.Entity.Forum.ForumTopic", "SubmissionId")
						.HasConstraintName("fk_forum_topics_submissions_submission_id1");

					b.Navigation("Forum");

					b.Navigation("Poll");

					b.Navigation("Poster");

					b.Navigation("Submission");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopicWatch", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Forum.ForumTopic", "ForumTopic")
						.WithMany("ForumTopicWatches")
						.HasForeignKey("ForumTopicId")
						.HasConstraintName("fk_forum_topic_watches_forum_topics_forum_topic_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("ForumTopicWatches")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_forum_topic_watches_users_user_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("ForumTopic");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany("Games")
						.HasForeignKey("SystemId")
						.HasConstraintName("fk_games_game_systems_system_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("System");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGameGroup", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.GameGroup", "GameGroup")
						.WithMany("Games")
						.HasForeignKey("GameGroupId")
						.HasConstraintName("fk_game_game_groups_game_groups_game_group_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("GameGroups")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_game_game_groups_games_game_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Game");

					b.Navigation("GameGroup");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGenre", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("GameGenres")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_game_genres_games_game_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.Genre", "Genre")
						.WithMany("GameGenres")
						.HasForeignKey("GenreId")
						.HasConstraintName("fk_game_genres_genres_genre_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Game");

					b.Navigation("Genre");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddress", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany()
						.HasForeignKey("GameId")
						.HasConstraintName("fk_game_ram_addresses_games_game_id");

					b.HasOne("TASVideos.Data.Entity.Game.GameRamAddressDomain", "GameRamAddressDomain")
						.WithMany()
						.HasForeignKey("GameRamAddressDomainId")
						.HasConstraintName("fk_game_ram_addresses_game_ram_address_domains_game_ram_addres")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany()
						.HasForeignKey("SystemId")
						.HasConstraintName("fk_game_ram_addresses_game_systems_system_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Game");

					b.Navigation("GameRamAddressDomain");

					b.Navigation("System");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddressDomain", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany()
						.HasForeignKey("GameSystemId")
						.HasConstraintName("fk_game_ram_address_domains_game_systems_game_system_id");

					b.Navigation("System");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("Roms")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_game_roms_games_game_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Game");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystemFrameRate", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany("SystemFrameRates")
						.HasForeignKey("GameSystemId")
						.HasConstraintName("fk_game_system_frame_rates_game_systems_game_system_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("System");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PrivateMessage", b =>
				{
					b.HasOne("TASVideos.Data.Entity.User", "FromUser")
						.WithMany("SentPrivateMessages")
						.HasForeignKey("FromUserId")
						.HasConstraintName("fk_private_messages_users_from_user_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "ToUser")
						.WithMany("ReceivedPrivateMessages")
						.HasForeignKey("ToUserId")
						.HasConstraintName("fk_private_messages_users_to_user_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("FromUser");

					b.Navigation("ToUser");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("Publications")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_publications_games_game_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Publication", "ObsoletedBy")
						.WithMany("ObsoletedMovies")
						.HasForeignKey("ObsoletedById")
						.HasConstraintName("fk_publications_publications_obsoleted_by_id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("TASVideos.Data.Entity.PublicationClass", "PublicationClass")
						.WithMany()
						.HasForeignKey("PublicationClassId")
						.HasConstraintName("fk_publications_publication_classes_publication_class_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.GameRom", "Rom")
						.WithMany("Publications")
						.HasForeignKey("RomId")
						.HasConstraintName("fk_publications_game_roms_rom_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
						.WithOne("Publication")
						.HasForeignKey("TASVideos.Data.Entity.Publication", "SubmissionId")
						.HasConstraintName("fk_publications_submissions_submission_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.GameSystemFrameRate", "SystemFrameRate")
						.WithMany()
						.HasForeignKey("SystemFrameRateId")
						.HasConstraintName("fk_publications_game_system_frame_rates_system_frame_rate_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany("Publications")
						.HasForeignKey("SystemId")
						.HasConstraintName("fk_publications_game_systems_system_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.WikiPage", "WikiContent")
						.WithMany()
						.HasForeignKey("WikiContentId")
						.HasConstraintName("fk_publications_wiki_pages_wiki_content_id");

					b.Navigation("Game");

					b.Navigation("ObsoletedBy");

					b.Navigation("PublicationClass");

					b.Navigation("Rom");

					b.Navigation("Submission");

					b.Navigation("System");

					b.Navigation("SystemFrameRate");

					b.Navigation("WikiContent");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationAuthor", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("Authors")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_authors_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "Author")
						.WithMany("Publications")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_publication_authors_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Author");

					b.Navigation("Publication");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationFile", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("Files")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_files_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Publication");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationFlag", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Flag", "Flag")
						.WithMany()
						.HasForeignKey("FlagId")
						.HasConstraintName("fk_publication_flags_flags_flag_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationFlags")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_flags_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Flag");

					b.Navigation("Publication");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationMaintenanceLog", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationMaintenanceLogs")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_maintenance_logs_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("PublicationMaintenanceLogs")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_publication_maintenance_logs_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Publication");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationRating", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationRatings")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_ratings_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("PublicationRatings")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_publication_ratings_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Publication");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationTag", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationTags")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_tags_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Tag", "Tag")
						.WithMany("PublicationTags")
						.HasForeignKey("TagId")
						.HasConstraintName("fk_publication_tags_tags_tag_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Publication");

					b.Navigation("Tag");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.PublicationUrl", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
						.WithMany("PublicationUrls")
						.HasForeignKey("PublicationId")
						.HasConstraintName("fk_publication_urls_publications_publication_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Publication");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.RoleLink", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Role", "Role")
						.WithMany("RoleLinks")
						.HasForeignKey("RoleId")
						.HasConstraintName("fk_role_links_roles_role_id");

					b.Navigation("Role");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.RolePermission", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Role", "Role")
						.WithMany("RolePermission")
						.HasForeignKey("RoleId")
						.HasConstraintName("fk_role_permission_roles_role_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Role");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("Submissions")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_submissions_games_game_id");

					b.HasOne("TASVideos.Data.Entity.PublicationClass", "IntendedClass")
						.WithMany()
						.HasForeignKey("IntendedClassId")
						.HasConstraintName("fk_submissions_publication_classes_intended_class_id");

					b.HasOne("TASVideos.Data.Entity.User", "Judge")
						.WithMany()
						.HasForeignKey("JudgeId")
						.HasConstraintName("fk_submissions_users_judge_id");

					b.HasOne("TASVideos.Data.Entity.User", "Publisher")
						.WithMany()
						.HasForeignKey("PublisherId")
						.HasConstraintName("fk_submissions_users_publisher_id");

					b.HasOne("TASVideos.Data.Entity.SubmissionRejectionReason", "RejectionReason")
						.WithMany()
						.HasForeignKey("RejectionReasonId")
						.HasConstraintName("fk_submissions_submission_rejection_reasons_rejection_reason_id");

					b.HasOne("TASVideos.Data.Entity.Game.GameRom", "Rom")
						.WithMany("Submissions")
						.HasForeignKey("RomId")
						.HasConstraintName("fk_submissions_game_roms_rom_id");

					b.HasOne("TASVideos.Data.Entity.User", "Submitter")
						.WithMany()
						.HasForeignKey("SubmitterId")
						.HasConstraintName("fk_submissions_users_submitter_id");

					b.HasOne("TASVideos.Data.Entity.Game.GameSystemFrameRate", "SystemFrameRate")
						.WithMany()
						.HasForeignKey("SystemFrameRateId")
						.HasConstraintName("fk_submissions_game_system_frame_rates_system_frame_rate_id");

					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany("Submissions")
						.HasForeignKey("SystemId")
						.HasConstraintName("fk_submissions_game_systems_system_id");

					b.HasOne("TASVideos.Data.Entity.WikiPage", "WikiContent")
						.WithMany()
						.HasForeignKey("WikiContentId")
						.HasConstraintName("fk_submissions_wiki_pages_wiki_content_id");

					b.Navigation("Game");

					b.Navigation("IntendedClass");

					b.Navigation("Judge");

					b.Navigation("Publisher");

					b.Navigation("RejectionReason");

					b.Navigation("Rom");

					b.Navigation("Submitter");

					b.Navigation("System");

					b.Navigation("SystemFrameRate");

					b.Navigation("WikiContent");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.SubmissionAuthor", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
						.WithMany("SubmissionAuthors")
						.HasForeignKey("SubmissionId")
						.HasConstraintName("fk_submission_authors_submissions_submission_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "Author")
						.WithMany("Submissions")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_submission_authors_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Author");

					b.Navigation("Submission");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.SubmissionStatusHistory", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
						.WithMany("History")
						.HasForeignKey("SubmissionId")
						.HasConstraintName("fk_submission_status_history_submissions_submission_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Submission");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
				{
					b.HasOne("TASVideos.Data.Entity.User", "Author")
						.WithMany("UserFiles")
						.HasForeignKey("AuthorId")
						.HasConstraintName("fk_user_files_users_author_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
						.WithMany("UserFiles")
						.HasForeignKey("GameId")
						.HasConstraintName("fk_user_files_games_game_id");

					b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
						.WithMany()
						.HasForeignKey("SystemId")
						.HasConstraintName("fk_user_files_game_systems_system_id");

					b.Navigation("Author");

					b.Navigation("Game");

					b.Navigation("System");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
				{
					b.HasOne("TASVideos.Data.Entity.UserFileComment", "Parent")
						.WithMany("Children")
						.HasForeignKey("ParentId")
						.HasConstraintName("fk_user_file_comments_user_file_comments_parent_id");

					b.HasOne("TASVideos.Data.Entity.UserFile", "UserFile")
						.WithMany("Comments")
						.HasForeignKey("UserFileId")
						.HasConstraintName("fk_user_file_comments_user_files_user_file_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("UserFileComments")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_user_file_comments_users_user_id")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("Parent");

					b.Navigation("User");

					b.Navigation("UserFile");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserMaintenanceLog", b =>
				{
					b.HasOne("TASVideos.Data.Entity.User", "Editor")
						.WithMany("EditMaintenanceLogs")
						.HasForeignKey("EditorId")
						.HasConstraintName("fk_user_maintenance_logs_users_editor_id");

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("UserMaintenanceLogs")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_user_maintenance_logs_users_user_id");

					b.Navigation("Editor");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserRole", b =>
				{
					b.HasOne("TASVideos.Data.Entity.Role", "Role")
						.WithMany("UserRole")
						.HasForeignKey("RoleId")
						.HasConstraintName("fk_user_roles_roles_role_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("TASVideos.Data.Entity.User", "User")
						.WithMany("UserRoles")
						.HasForeignKey("UserId")
						.HasConstraintName("fk_user_roles_users_user_id")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Role");

					b.Navigation("User");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.WikiPage", b =>
				{
					b.HasOne("TASVideos.Data.Entity.User", "Author")
						.WithMany("WikiRevisions")
						.HasForeignKey("AuthorId")
						.HasConstraintName("fk_wiki_pages_users_author_id");

					b.HasOne("TASVideos.Data.Entity.WikiPage", "Child")
						.WithMany()
						.HasForeignKey("ChildId")
						.HasConstraintName("fk_wiki_pages_wiki_pages_child_id");

					b.Navigation("Author");

					b.Navigation("Child");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
				{
					b.Navigation("ForumPosts");

					b.Navigation("ForumTopics");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumCategory", b =>
				{
					b.Navigation("Forums");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPoll", b =>
				{
					b.Navigation("PollOptions");

					b.Navigation("Topic");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
				{
					b.Navigation("Votes");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
				{
					b.Navigation("ForumPosts");

					b.Navigation("ForumTopicWatches");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
				{
					b.Navigation("GameGenres");

					b.Navigation("GameGroups");

					b.Navigation("Publications");

					b.Navigation("Roms");

					b.Navigation("Submissions");

					b.Navigation("UserFiles");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGroup", b =>
				{
					b.Navigation("Games");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
				{
					b.Navigation("Publications");

					b.Navigation("Submissions");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystem", b =>
				{
					b.Navigation("Games");

					b.Navigation("Publications");

					b.Navigation("Submissions");

					b.Navigation("SystemFrameRates");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Game.Genre", b =>
				{
					b.Navigation("GameGenres");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
				{
					b.Navigation("Authors");

					b.Navigation("Files");

					b.Navigation("ObsoletedMovies");

					b.Navigation("PublicationAwards");

					b.Navigation("PublicationFlags");

					b.Navigation("PublicationMaintenanceLogs");

					b.Navigation("PublicationRatings");

					b.Navigation("PublicationTags");

					b.Navigation("PublicationUrls");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Role", b =>
				{
					b.Navigation("RoleLinks");

					b.Navigation("RolePermission");

					b.Navigation("UserRole");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
				{
					b.Navigation("History");

					b.Navigation("Publication");

					b.Navigation("SubmissionAuthors");

					b.Navigation("Topic");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.Tag", b =>
				{
					b.Navigation("PublicationTags");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.User", b =>
				{
					b.Navigation("EditMaintenanceLogs");

					b.Navigation("ForumTopicWatches");

					b.Navigation("Posts");

					b.Navigation("PublicationMaintenanceLogs");

					b.Navigation("PublicationRatings");

					b.Navigation("Publications");

					b.Navigation("ReceivedPrivateMessages");

					b.Navigation("SentPrivateMessages");

					b.Navigation("Submissions");

					b.Navigation("Topics");

					b.Navigation("UserAwards");

					b.Navigation("UserFileComments");

					b.Navigation("UserFiles");

					b.Navigation("UserMaintenanceLogs");

					b.Navigation("UserRoles");

					b.Navigation("WikiRevisions");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
				{
					b.Navigation("Comments");
				});

			modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
				{
					b.Navigation("Children");
				});
#pragma warning restore 612, 618
		}
	}
}
